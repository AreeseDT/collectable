{"version":3,"sources":["../lib/ts/list/compact.ts"],"names":[],"mappings":"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","file":"compact.js","sourcesContent":["import {max, min} from '../shared/functions';\nimport {CONST} from './common';\nimport {Slot, emptySlot} from './slot';\n\ninterface Position<T> {\n  upperIndex: number;\n  lowerIndex: number;\n  lastLowerIndex: number;\n  absoluteIndex: number;\n  compactable: boolean;\n  upper: Slot<T>;\n  lower: Slot<T>;\n}\n\nfunction isCompactable<T>(node: Slot<T>): boolean {\n  return node.slots.length < CONST.BRANCH_INDEX_MASK;\n}\n\nfunction incrementPos<T>(pos: Position<T>, nodes: Slot<T>[]): void {\n  if(pos.upperIndex === 1 && pos.lowerIndex === pos.upper.slots.length - 1) {\n    return;\n  }\n  if(pos.upperIndex === 0 && pos.lowerIndex >= pos.lastLowerIndex) {\n    pos.lowerIndex = 0;\n    pos.upperIndex++;\n    pos.upper = nodes[pos.upperIndex];\n  }\n  else {\n    pos.lowerIndex++;\n  }\n  pos.absoluteIndex++;\n  var lower = pos.upper.slots[pos.lowerIndex];\n  if(lower !== void 0) {\n    pos.lower = <Slot<T>>lower;\n    pos.compactable = isCompactable(pos.lower);\n  }\n}\n\nfunction copySlotLeft<T>(left: Position<T>, right: Position<T>): void {\n  var slot = <Slot<T>>right.upper.slots[right.lowerIndex];\n  left.upper.slots[left.lowerIndex] = slot;\n  left.lower = slot;\n  left.compactable = isCompactable(slot);\n  right.upper.slots[right.lowerIndex] = emptySlot;\n  right.lower = emptySlot;\n\n  if(left.upperIndex !== right.upperIndex) {\n    left.upper.size += slot.size;\n    left.upper.subcount += slot.slots.length;\n    right.upper.size -= slot.size;\n    right.upper.subcount -= slot.slots.length;\n  }\n}\n\nfunction ensureEditable<T>(pos: Position<T>): void {\n  if(pos.lower.group !== pos.upper.group) {\n    var lower = pos.lower.cloneToGroup(pos.upper.group, true);\n    pos.lower = lower;\n    pos.upper.slots[pos.lowerIndex] = lower;\n  }\n}\n\nfunction makePosition<T>(node: Slot<T>, lastLowerIndex: number): Position<T> {\n  var slot = <Slot<T>>node.slots[0];\n  return {\n    upperIndex: 0,\n    lowerIndex: 0,\n    lastLowerIndex,\n    absoluteIndex: 0,\n    compactable: isCompactable(slot),\n    upper: node,\n    lower: slot\n  };\n}\n\nexport function compact<T>(nodes: [Slot<T>, Slot<T>], shift: number, reductionTarget: number, lists?: any): void {\n  var isRecomputeUpdated = false;\n  var isTreeBase = shift === CONST.BRANCH_INDEX_BITCOUNT;\n  var finalSlotCount = nodes[0].slots.length + nodes[1].slots.length - reductionTarget;\n\n  // Check if the reduction target can be reduced further to eliminate the additional slots to the right and leave only a single node\n  if(finalSlotCount > CONST.BRANCH_FACTOR && nodes[0].subcount + nodes[1].subcount <= (CONST.BRANCH_FACTOR << CONST.BRANCH_INDEX_BITCOUNT)) {\n    reductionTarget += finalSlotCount - CONST.BRANCH_FACTOR;\n    finalSlotCount = CONST.BRANCH_FACTOR;\n  }\n\n  var lastFinalIndex = finalSlotCount - 1;\n  var isReductionTargetMet = false;\n  var oldLeftCount = nodes[0].slots.length;\n  var newLeftCount = min(finalSlotCount, CONST.BRANCH_FACTOR);\n  nodes[0].slots.length = newLeftCount;\n\n  var left = makePosition(nodes[0], newLeftCount - 1);\n  var right = makePosition(nodes[0], oldLeftCount - 1);\n  incrementPos(right, nodes);\n  var removed = 0;\n\n  do {\n    // Move the position markers until the left is at a location that is eligible for receiving subslots from the right\n    if(isReductionTargetMet || !left.compactable) {\n      incrementPos(left, nodes);\n      if(removed > 0) {\n        copySlotLeft(left, right);\n      }\n      incrementPos(right, nodes);\n    }\n\n    if(!isReductionTargetMet && left.compactable) {\n      // Mount the left position marker at the same location as the right position marker\n      ensureEditable(left);\n      ensureEditable(right);\n\n      if(!isRecomputeUpdated) {\n        isRecomputeUpdated = true;\n        left.upper.recompute = max(left.upper.recompute, left.upper.slots.length - left.lowerIndex);\n      }\n\n      var lslots = left.lower.slots;\n      var rslots = right.lower.slots;\n      var startIndex = lslots.length;\n      var slotsToMove = min(CONST.BRANCH_FACTOR - startIndex, rslots.length);\n      var subcountMoved = 0;\n      lslots.length = startIndex + slotsToMove;\n\n      // Copy slots from right to left until the right node is empty or the left node is full\n      var sizeMoved = isTreeBase ? slotsToMove : 0;\n\n      for(var i = startIndex, j = 0, total = max(rslots.length - slotsToMove, slotsToMove); j < total; i++, j++) {\n        var slot = <Slot<T>>rslots[j];\n        if(!isTreeBase) {\n          sizeMoved += slot.size;\n          subcountMoved += slot.slots.length;\n        }\n        if(j < slotsToMove) {\n          lslots[i] = slot;\n        }\n        if(j + slotsToMove < rslots.length) {\n          rslots[j] = rslots[j + slotsToMove];\n        }\n      }\n\n      left.lower.size += sizeMoved;\n      right.lower.size -= sizeMoved;\n      if(!isTreeBase) {\n        left.lower.subcount += subcountMoved;\n        right.lower.subcount -= subcountMoved;\n      }\n\n      if(left.upperIndex !== right.upperIndex) {\n        left.upper.size += sizeMoved;\n        left.upper.subcount += slotsToMove;\n        right.upper.size -= sizeMoved;\n        right.upper.subcount -= slotsToMove;\n      }\n\n      left.compactable = isCompactable(left.lower);\n\n      // If the right-side slot has been drained, then we are one step closer to the slot reduction target\n      rslots.length -= slotsToMove;\n      if(rslots.length === 0) {\n        removed++;\n        isReductionTargetMet = removed === reductionTarget;\n        incrementPos(right, nodes);\n      }\n    }\n  } while(left.absoluteIndex < lastFinalIndex);\n\n  nodes[1].slots.length = max(0, finalSlotCount - nodes[0].slots.length);\n  nodes[1].recompute = nodes[1].slots.length;\n}\n"]}