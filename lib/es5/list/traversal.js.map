{"version":3,"sources":["../lib/ts/list/traversal.ts"],"names":[],"mappings":";AAAA,iDAAgE;AAChE,mCAAoG;AACpG,+BAA4B;AAC5B,+BAAiD;AACjD,iCAA8E;AAU9E,mBAAmB,OAAe,EAAE,UAAkB,EAAE,QAAgB;IACtE,MAAM,CAAC,OAAO,IAAI,UAAU,IAAI,OAAO,GAAG,UAAU,GAAG,QAAQ,CAAC;AAClE,CAAC;AAWD,uBAAiC,IAAa,EAAE,OAAe,EAAE,QAAgB;IAC/E,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAkB;UACrC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;UAC/C,SAAS,CAAC,OAAO,EAAE,qBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9F,CAAC;AAJD,sCAIC;AAWD,oBAAuB,SAAkB,EAAE,SAAkB,EAAE,QAAgB;IAC7E,IAAI,WAAW,GAAG,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM;UACxD,qBAAY,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACtG,MAAM,CAAC,WAAW,IAAI,SAAS,CAAC,MAAM,IAAI,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;AAC9I,CAAC;AAaD,oBAAuB,KAAmB,EAAE,OAAe,EAAE,aAAsB;IACjF,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,OAAO,GAAG,aAAa,CAAC;IACpE,IAAI,MAAqB,CAAC;IAC1B,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACjB,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,SAAS,CAAC,OAAO,EAAE,qBAAY,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;cACnH,CAAmB,GAAG,CAAkB,CAAC;QAC7C,EAAE,CAAA,CAAC,MAAM,KAAK,CAAkB,CAAC;YAAC,OAAO,GAAG,IAAI,CAAC;IACnD,CAAC;IACD,IAAI,CAAC,EAAE,CAAA,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACvB,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;cACrE,CAAkB,GAAG,CAAmB,CAAC;QAC7C,EAAE,CAAA,CAAC,MAAM,KAAK,CAAmB,CAAC;YAAC,OAAO,GAAG,IAAI,CAAC;IACpD,CAAC;IACD,IAAI,CAAC,CAAC;QACJ,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAC3B,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;QAC5C,MAAM,GAAG,UAAU,IAAI,OAAO,GAAG,CAAmB;cAChD,OAAO,GAAG,OAAO,GAAG,CAAkB;kBACtC,qBAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IACD,MAAM,CAAC,OAAO;UACV,eAAO,CAAC,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,OAAO,CAAC;UAC9C,MAAM,KAAK,CAAkB,GAAG,IAAI,GAAG,KAAK,CAAC;AACnD,CAAC;AAED;IAAA;QA0EE,UAAK,GAAG,kBAAU,CAAI,KAAK,CAAC,CAAC;QAC7B,aAAQ,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QAC1B,YAAO,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QACzB,UAAK,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QACvB,wBAAmB,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QACrC,oBAAe,GAAgB,CAAC,CAAC,CAAC;QAClC,mBAAc,GAAG,KAAK,CAAC;QACvB,eAAU,GAAG,EAAC,IAAI,EAAE,WAAI,CAAC,KAAK,EAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC;QAC1D,UAAK,GAAG,CAAC,CAAC;QACV,UAAK,GAAG,CAAC,CAAC;IAuUZ,CAAC;IAlZgB,uBAAY,GAA3B;QACE,IAAI,QAAQ,GAAG,UAAU,CAAC,SAAS,CAAC;QACpC,EAAE,CAAA,CAAC,uBAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACzB,UAAU,CAAC,SAAS,GAAG,QAAQ,GAAG;gBAChC,cAAc,EAAE,IAAI,UAAU,EAAO;gBACrC,gBAAgB,EAAE,IAAI,UAAU,EAAO;gBACvC,YAAY,EAAE,IAAI,UAAU,EAAO;gBACnC,gBAAgB,EAAE,IAAI,UAAU,EAAO;aACxC,CAAC;QACJ,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEM,yBAAc,GAArB;QACE,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,cAAc,CAAC;IAClD,CAAC;IAEM,2BAAgB,GAAvB;QACE,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,gBAAgB,CAAC;IACpD,CAAC;IAEM,uBAAY,GAAnB;QACE,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,YAAY,CAAC;IAChD,CAAC;IAEM,2BAAgB,GAAvB;QACE,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,gBAAgB,CAAC;IACpD,CAAC;IAEM,sBAAW,GAAlB,UAAsB,KAAmB,EAAE,IAAa,EAAE,OAAe,EAAE,SAAkB,EAAE,aAAsB;QACnH,IAAI,MAAM,GAAG,UAAU,CAAC,gBAAgB,EAAK,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9E,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,uBAAY,GAAnB,UAAuB,KAAmB,EAAE,OAAe,EAAE,aAAsB;QACjF,OAAO,GAAG,oBAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3C,EAAE,CAAA,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,IAAI,GAAG,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI;cAClD,UAAU,CAAC,WAAW,CAAI,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC5E,CAAC;IAEM,oBAAS,GAAhB,UAAoB,KAAmB,EAAE,IAAmB,EAAE,aAAsB;QAClF,IAAI,IAAI,GAAG,eAAO,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAC/C,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;cAClF,UAAU,CAAC,WAAW,CAAI,KAAK,EAAE,IAAI,EAAE,IAAI,KAAK,CAAkB,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC;cAC9G,IAAI,CAAC;QACT,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,oBAAS,GAAhB,UAAoB,KAAmB,EAAE,aAAsB;QAC7D,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,CAAkB,EAAE,aAAa,CAAC,CAAC;IACxE,CAAC;IAEM,oBAAS,GAAhB,UAAoB,KAAmB,EAAE,aAAsB;QAC7D,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,CAAmB,EAAE,aAAa,CAAC,CAAC;IACzE,CAAC;IAEM,oBAAS,GAAhB,UAAoB,KAAmB,EAAE,OAAe,EAAE,MAAqB,EAAE,aAAsB;QACrG,IAAI,IAAI,GAAG,eAAO,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI;cAClD,UAAU,CAAC,WAAW,CAAI,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAaD,2BAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IAC/B,CAAC;IAED,iCAAY,GAAZ;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IAC9B,CAAC;IAED,2CAAsB,GAAtB;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IACtD,CAAC;IAED,0BAAK,GAAL,UAAM,KAAmB,EAAE,IAAa,EAAE,KAAK,EAAE,eAAuC;QAAvC,gCAAA,EAAA,mBAAuC;QACtF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,EAAE,CAAA,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC7B,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,KAAK,GAAG,oBAAY,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YAC1C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACzC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,4BAAO,GAAP;QACE,IAAI,CAAC,KAAK,GAAG,kBAAU,CAAI,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QAC5B,IAAI,CAAC,mBAAmB,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,WAAI,CAAC,KAAK,EAAK,CAAC;IACzC,CAAC;IAED,2BAAM,GAAN,UAAO,IAAiB,EAAE,YAAkC;QAC1D,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC;QAC/B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACvB,IAAI,UAAmB,CAAC;QACxB,IAAI,UAAmB,CAAC;QACxB,IAAI,UAAmB,CAAC;QAExB,EAAE,CAAA,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,mBAAmB,GAAG,WAAI,CAAC,IAAI,EAAK,CAAC;QAC5C,CAAC;QAED,IAAI,YAAY,GAAG,IAAI,KAAK,CAA2B,GAAG,CAAC,IAAI,GAAG,CAAmB,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;QACrG,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;QAEpC,EAAE,CAAA,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAGtB,IAAI,SAAS,GAAG,CAAC,EAAE,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC;YAC7C,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,EAAE,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC;YACvD,EAAE,CAAA,CAAC,qBAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC3B,SAAS,IAAI,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC,QAAQ,CAAC;gBAC1D,SAAS,IAAI,YAAY,CAAC,OAAO,CAAC;gBAClC,QAAQ,IAAI,YAAY,CAAC,SAAS,CAAC;gBACnC,EAAE,CAAA,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpB,SAAS,IAAI,eAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9C,CAAC;gBACD,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,YAAY,CAAC,SAAS,CAAC;YAC5C,CAAC;YACD,IAAI,KAAK,GAAG,IAAI,KAAK,CAAU,SAAS,CAAC,CAAC;YAC1C,KAAK,CAAC,SAAS,CAAC,GAAG,IAAI,KAAK,CAAmB,GAAG,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;YAClG,UAAU,GAAG,IAAI,WAAI,CAAI,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACvF,UAAU,GAAG,WAAI,CAAC,MAAM,CAAI,KAAK,EAAE,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAI,CAAC,IAAI,EAAK,EAAE,UAAU,CAAC,CAAC;YAC5G,UAAU,GAAG,KAAK,CAAC;QACrB,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACpD,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;YAC7B,IAAI,UAAU,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC;YACnD,IAAI,OAAO,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;YAI5B,EAAE,CAAA,CAAC,UAAU,IAAI,IAAI,KAAK,CAAmB,IAAI,qBAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAEzE,EAAE,CAAA,CAAC,qBAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAC3B,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC;oBAC/B,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;oBAC/B,SAAS,IAAI,OAAO,CAAC;gBACvB,CAAC;gBAGD,EAAE,CAAA,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAEjC,UAAU,CAAC,IAAI,GAAG,UAAU,GAAG,qBAAS,CAAC,YAAY,CAAC;0BAClD,UAAU,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC;0BACtE,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC3C,CAAC;gBACD,IAAI,CAAC,EAAE,CAAA,CAAC,qBAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAChC,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;gBACjD,CAAC;gBAED,EAAE,CAAA,CAAC,qBAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,YAAY,CAAC,SAAS,CAAC;oBAC1C,EAAE,CAAA,CAAC,CAAC,OAAO,IAAI,UAAU,CAAC,MAAM,KAAK,CAAkB,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,UAAU,CAAC,MAAM,KAAK,CAAmB,CAAC,CAAC,CAAC,CAAC;wBACpH,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;oBACxF,CAAC;gBACH,CAAC;gBAED,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC/E,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;gBACxC,CAAC;gBAKD,EAAE,CAAA,CAAC,qBAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAC3B,UAAU,CAAC,IAAI,IAAI,YAAY,CAAC,SAAS,CAAC;oBAC1C,EAAE,CAAA,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;wBACxB,UAAU,CAAC,SAAS,IAAI,YAAY,CAAC,SAAS,CAAC;oBACjD,CAAC;gBACH,CAAC;gBAKD,EAAE,CAAA,CAAC,UAAU,CAAC,CAAC,CAAC;oBACd,EAAE,CAAA,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;wBACxB,UAAU,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC;oBAC9C,CAAC;oBACD,UAAU,CAAC,QAAQ,IAAI,SAAS,CAAC,UAAU,CAAC;oBAC5C,UAAU,CAAC,IAAI,IAAI,SAAS,CAAC,SAAS,CAAC;oBAEvC,EAAE,CAAA,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,IAAI,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,UAAU,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3J,UAAU,CAAC,SAAS,GAAG,eAAG,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;oBACxF,CAAC;oBACD,IAAI,CAAC,CAAC;wBACJ,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;oBAC5B,CAAC;gBACH,CAAC;YACH,CAAC;YAID,EAAE,CAAA,CAAC,IAAI,KAAK,CAAmB,IAAI,CAAC,UAAU,IAAI,IAAI,KAAK,CAAqB,IAAI,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5G,IAAI,YAAY,GAAY,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACxD,EAAE,CAAA,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACrC,EAAE,CAAA,CAAC,UAAU,CAAC,CAAC,CAAC;wBACd,YAAY,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;wBACnC,YAAY,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC;oBACrD,CAAC;gBACH,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,IAAI,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC;oBAC3B,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,YAAY,GAAG,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;oBACjF,YAAY,CAAC,GAAG,GAAG,GAAG,CAAC;gBACzB,CAAC;gBAED,EAAE,CAAA,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACrC,EAAE,CAAA,CAAC,UAAU,CAAC,CAAC,CAAC;wBACd,YAAY,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;oBAC5C,CAAC;gBACH,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBACpE,CAAC;YACH,CAAC;YACD,IAAI,CAAC,EAAE,CAAA,CAAC,IAAI,KAAK,CAAmB,CAAC,CAAC,CAAC;gBACrC,EAAE,CAAA,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;oBAC1B,EAAE,CAAA,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACjC,UAAU,CAAC,IAAI,GAAG,UAAU,GAAG,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBACtE,CAAC;oBACD,EAAE,CAAA,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC/B,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;oBAC1B,CAAC;oBACD,IAAI,CAAC,CAAC;wBACJ,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBAC5C,CAAC;oBACD,SAAS,CAAC,GAAG,GAAa,UAAU,CAAC,KAAK,CAAC,SAAS,CAAE,CAAC,GAAG,CAAC;oBAC3D,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;gBAC1C,CAAC;YACH,CAAC;QACH,CAAC;QAGD,EAAE,CAAA,CAAC,UAAU,CAAC,SAAS,KAAK,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,KAAK,EAAmB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAA2B,CAAC,CAAC,CAAC,CAAC;YACxH,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QAC5B,CAAC;QAED,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/E,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAClC,CAAC;QAED,EAAE,CAAA,CAAC,YAAwB,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAA,CAAC,IAAI,KAAK,CAAmB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;gBAC3D,EAAE,CAAA,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC;gBAC3B,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC7C,CAAC;YACH,CAAC;YAED,EAAE,CAAA,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC1C,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,eAAO,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC;YAED,EAAE,CAAA,CAAC,UAAU,IAAI,SAAS,KAAK,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,MAAM,KAAK,UAAU,IAAI,IAAI,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChH,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC;gBAC3B,SAAS,CAAC,MAAM,GAAG,UAAU,CAAC;gBAC9B,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC;gBACzB,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC;YAC1B,CAAC;YACD,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;YAChC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,EAAE,CAAA,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,WAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;QAC1B,IAAI,CAAC,KAAK,IAAI,CAA2B,CAAC;QAE1C,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAED,gCAAW,GAAX,UAAY,iBAA0B,EAAE,eAAuB;QAC7D,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC3B,EAAE,CAAA,CAAC,eAAe,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE;eAC7E,SAAS,CAAC,MAAM,KAAK,iBAAiB;eACtC,CAAC,IAAI,CAAC,eAAe,KAAK,CAAqB;mBAC9C,CAAC,IAAI,CAAC,eAAe,KAAK,CAAmB,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;YACrC,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAA,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QAED,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAC9B,eAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,KAAK,CAA2B,GAAG,WAAI,CAAC,KAAK,CAAI,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC;QAC3H,IAAI,MAAM,GAAG,UAAU,CAAC,YAAY,EAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QAEvF,OAAM,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YAChC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAClD,CAAC;QAED,SAAS,CAAC,MAAM,GAAG,iBAAiB,CAAC;QACrC,SAAS,CAAC,SAAS,IAAI,eAAe,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,QAAQ,CAAC;QAC3C,MAAM,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAED,oCAAe,GAAf,UAAgB,OAAe,EAAE,IAAiB,EAAE,oBAA6B;QAC/E,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,MAAM,GAAG,IAAI,EAAE,WAAW,GAAG,KAAK,CAAC;QAC5D,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvB,GAAG,CAAC;YACF,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,IAAI,KAAK,CAAmB,GAAG,IAAI,GAAG,CAAqB,CAAC,CAAC;YACzJ,EAAE,CAAA,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,WAAW,GAAG,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC5D,EAAE,CAAA,CAAC,WAAW,CAAC,CAAC,CAAC;oBACf,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACnB,MAAM,GAAG,IAAI,CAAC;oBACd,EAAE,CAAA,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBACxB,IAAI,GAAG,CAAmB,CAAC;oBAC7B,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,QAAO,CAAC,WAAW,IAAI,CAAC,IAAI,KAAK,CAAmB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE;QAErG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,qCAAgB,GAAhB,UAAiB,OAAe,EAAE,aAAsB;QACtD,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;QACnE,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,KAAK,CAAmB,GAAG,qBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QAC5H,GAAG,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YACrD,EAAE,CAAA,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;gBACzB,OAAM,IAAI,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;oBAC5B,IAAI,SAAS,GAAG,IAAI,EAAE,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC;oBAC9C,WAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;gBACnC,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC;YACD,KAAK,IAAI,CAA2B,CAAC;YACrC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC;YACrB,EAAE,CAAA,CAAC,aAAa,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrF,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjD,CAAC;YACD,IAAI,GAAG,WAAI,CAAC,MAAM,CAAI,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAkB,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAW,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1G,CAAC,QAAO,KAAK,GAAG,CAAC,EAAE;QAEnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEf,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,gCAAW,GAAX,UAAY,OAAe,EAAE,SAAkB,EAAE,aAAsB;QACrE,OAAO,GAAG,oBAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAChD,IAAI,MAAM,GAAG,SAAS,GAAG,qBAAY,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QACjF,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,SAAS,GAAG,CAAqB,GAAG,CAA2B,EAAE,aAAa,CAAC,CAAC;QAC9G,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAEzD,EAAE,CAAA,CAAC,uBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,oBAAY,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAqB,EAAE,KAAK,CAAC,CAAC;YAC5D,IAAI,GAAY,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAChE,CAAC;QACD,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;QACD,eAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,iBAAC;AAAD,CA1ZA,AA0ZC,IAAA;AA1ZY,gCAAU;AA4ZvB,sBAAgC,KAAmB,EAAE,OAAe;IAClE,IAAI,IAAI,GAAG,UAAU,CAAC,YAAY,CAAI,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAC7D,EAAE,CAAA,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;QAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClC,MAAM,CAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AACrE,CAAC;AAJD,oCAIC;AAED,sBAAgC,IAAa,EAAE,OAAe,EAAE,QAAgB;IAC9E,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,KAAK,CAAkB,GAAG,IAAI,CAAC,MAAM,GAAG,qBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC5H,CAAC;AAFD,oCAEC","file":"traversal.js","sourcesContent":["import {max, isDefined, isUndefined} from '../shared/functions';\nimport {CONST, COMMIT_MODE, OFFSET_ANCHOR, invertOffset, invertAnchor, verifyIndex} from './common';\nimport {View} from './view';\nimport {Slot, ExpansionParameters} from './slot';\nimport {ListState, emptyState, getView, getOtherView, setView} from './state';\n\n/**\n * Checks whether a list ordinal position lies within the absolute range of a slot within the list\n *\n * @param {number} ordinal\n * @param {number} leftOffset\n * @param {number} slotSize\n * @returns {boolean}\n */\nfunction isInRange(ordinal: number, leftOffset: number, slotSize: number): boolean {\n  return ordinal >= leftOffset && ordinal < leftOffset + slotSize;\n}\n\n/**\n * Checks whether a list ordinal position lies within the specified view's absolute range within the list\n *\n * @template T The type of elements in the list\n * @param {View<T>} view A view to perform a range check against\n * @param {number} ordinal An ordinal position whose existence should be checked with respect to the specified view\n * @param {number} listSize The total number of elements in the list\n * @returns {boolean} true if the ordinal falls within the view's enclosed range, otherwise false\n */\nexport function isViewInRange<T>(view: View<T>, ordinal: number, listSize: number): boolean {\n  return view.anchor === OFFSET_ANCHOR.LEFT\n    ? isInRange(ordinal, view.offset, view.slot.size)\n    : isInRange(ordinal, invertOffset(view.offset, view.slot.size, listSize), view.slot.size);\n}\n\n/**\n * Checks an upper view's offset and size to see if it is an ancestor of the lower view\n *\n * @template T The type of elements in the list\n * @param {View<T>} upperView An ancestral view\n * @param {View<T>} lowerView A descendant view\n * @param {number} listSize The total number of elements in the list\n * @returns {boolean} true if upperView is an ancestor of lowerView, otherwise false\n */\nfunction isAncestor<T>(upperView: View<T>, lowerView: View<T>, listSize: number): boolean {\n  var upperOffset = lowerView.anchor === upperView.anchor ? upperView.offset\n                  : invertOffset(upperView.offset, upperView.slot.size + lowerView.sizeDelta, listSize);\n  return upperOffset <= lowerView.offset && upperOffset + upperView.slot.size + lowerView.sizeDelta >= lowerView.offset + lowerView.slot.size;\n}\n\n/**\n * Selects and returns either the left or the right view for further operations at the specified ordinal position. The\n * view is selected with a preference for preserving the position of the last view that was written to, so that the\n * reading and writing of views will implicitly optimise itself according to the way the list is being used.\n *\n * @param {ListState<T>} state The list state to be queried\n * @param {number} ordinal A hint to indicate the next ordinal position to be queried\n * @returns {View<T>} One of either the left or the right view\n *\n * @memberOf ListState\n */\nfunction selectView<T>(state: ListState<T>, ordinal: number, asWriteTarget: boolean): View<T> {\n  var left = state.left, right = state.right, resolve = asWriteTarget;\n  var anchor: OFFSET_ANCHOR;\n  if(left.isNone()) {\n    anchor = right.isRoot() || isInRange(ordinal, invertOffset(right.offset, right.slot.size, state.size), right.slot.size)\n      ? OFFSET_ANCHOR.RIGHT : OFFSET_ANCHOR.LEFT;\n    if(anchor === OFFSET_ANCHOR.LEFT) resolve = true;\n  }\n  else if(right.isNone()) {\n    anchor = left.isRoot() || isInRange(ordinal, left.offset, left.slot.size)\n      ? OFFSET_ANCHOR.LEFT : OFFSET_ANCHOR.RIGHT;\n    if(anchor === OFFSET_ANCHOR.RIGHT) resolve = true;\n  }\n  else {\n    var leftEnd = left.bound();\n    var rightStart = state.size - right.bound();\n    anchor = rightStart <= ordinal ? OFFSET_ANCHOR.RIGHT\n      : leftEnd > ordinal ? OFFSET_ANCHOR.LEFT\n      : invertAnchor(state.lastWrite);\n  }\n  return resolve\n    ? getView(state, anchor, asWriteTarget, ordinal)\n    : anchor === OFFSET_ANCHOR.LEFT ? left : right;\n}\n\nexport class TreeWorker<T> {\n  private static _defaults: {\n    defaultPrimary: TreeWorker<any>;\n    defaultSecondary: TreeWorker<any>;\n    defaultOther: TreeWorker<any>;\n    defaultTemporary: TreeWorker<any>;\n  };\n\n  private static _getDefaults() {\n    var defaults = TreeWorker._defaults;\n    if(isUndefined(defaults)) {\n      TreeWorker._defaults = defaults = {\n        defaultPrimary: new TreeWorker<any>(),\n        defaultSecondary: new TreeWorker<any>(),\n        defaultOther: new TreeWorker<any>(),\n        defaultTemporary: new TreeWorker<any>(),\n      };\n    }\n    return defaults;\n  }\n\n  static defaultPrimary<T>(): TreeWorker<T> {\n    return TreeWorker._getDefaults().defaultPrimary;\n  }\n\n  static defaultSecondary<T>(): TreeWorker<T> {\n    return TreeWorker._getDefaults().defaultSecondary;\n  }\n\n  static defaultOther<T>(): TreeWorker<T> {\n    return TreeWorker._getDefaults().defaultOther;\n  }\n\n  static defaultTemporary<T>(): TreeWorker<T> {\n    return TreeWorker._getDefaults().defaultTemporary;\n  }\n\n  static refocusView<T>(state: ListState<T>, view: View<T>, ordinal: number, asAltView: boolean, asWriteTarget: boolean) {\n    var worker = TreeWorker.defaultTemporary<T>().reset(state, view, state.group);\n    view = worker.refocusView(ordinal, asAltView, asWriteTarget);\n    worker.dispose();\n    return view;\n  }\n\n  static focusOrdinal<T>(state: ListState<T>, ordinal: number, asWriteTarget: boolean): View<T>|undefined {\n    ordinal = verifyIndex(state.size, ordinal);\n    if(ordinal === -1) return void 0;\n    var view = selectView(state, ordinal, asWriteTarget);\n    return isViewInRange(view, ordinal, state.size) ? view\n      : TreeWorker.refocusView<T>(state, view, ordinal, false, asWriteTarget);\n  }\n\n  static focusEdge<T>(state: ListState<T>, edge: OFFSET_ANCHOR, asWriteTarget: boolean): View<T> {\n    var view = getView(state, edge, asWriteTarget);\n    view = view.offset > 0 || (asWriteTarget && !view.slot.isReserved() && !view.isRoot())\n      ? TreeWorker.refocusView<T>(state, view, edge === OFFSET_ANCHOR.LEFT ? 0 : state.size - 1, false, asWriteTarget)\n      : view;\n    return view;\n  }\n\n  static focusHead<T>(state: ListState<T>, asWriteTarget: boolean): View<T> {\n    return TreeWorker.focusEdge(state, OFFSET_ANCHOR.LEFT, asWriteTarget);\n  }\n\n  static focusTail<T>(state: ListState<T>, asWriteTarget: boolean): View<T> {\n    return TreeWorker.focusEdge(state, OFFSET_ANCHOR.RIGHT, asWriteTarget);\n  }\n\n  static focusView<T>(state: ListState<T>, ordinal: number, anchor: OFFSET_ANCHOR, asWriteTarget: boolean): View<T> {\n    var view = getView(state, anchor, true, ordinal);\n    return isViewInRange(view, ordinal, state.size) ? view\n      : TreeWorker.refocusView<T>(state, view, ordinal, false, true);\n  }\n\n  state = emptyState<T>(false);\n  previous = View.none<T>();\n  current = View.none<T>();\n  other = View.none<T>();\n  otherCommittedChild = View.none<T>();\n  otherCommitMode: COMMIT_MODE = -1;\n  committedOther = false;\n  slotResult = {slot: Slot.empty<T>(), index: 0, offset: 0};\n  group = 0;\n  shift = 0;\n\n  isRoot(): boolean {\n    return this.current.isRoot();\n  }\n\n  hasOtherView(): boolean {\n    return !this.other.isNone();\n  }\n\n  isOtherViewUncommitted(): boolean {\n    return !this.committedOther && !this.other.isNone();\n  }\n\n  reset(state: ListState<T>, view: View<T>, group, otherCommitMode = COMMIT_MODE.NO_CHANGE): TreeWorker<T> {\n    this.state = state;\n    this.current = view;\n    this.group = group;\n    this.shift = 0;\n    if(otherCommitMode === -1) {\n      this.committedOther = true;\n    }\n    else {\n      this.other = getOtherView(state, view.anchor);\n      this.committedOther = this.other.isNone();\n      this.otherCommitMode = otherCommitMode;\n    }\n    return this;\n  }\n\n  dispose(): void {\n    this.state = emptyState<T>(false);\n    this.previous = View.none<T>();\n    this.current = View.none<T>();\n    this.other = View.none<T>();\n    this.otherCommittedChild = View.none<T>();\n    this.slotResult.slot = Slot.empty<T>();\n  }\n\n  ascend(mode: COMMIT_MODE, expandParent?: ExpansionParameters): View<T> {\n    var childView = this.current;\n    var childSlot = childView.slot;\n    var group = this.group;\n    var parentView: View<T>;\n    var parentSlot: Slot<T>;\n    var hasChanges: boolean;\n\n    if(this.committedOther && !this.otherCommittedChild.isNone()) {\n      this.otherCommittedChild = View.none<T>();\n    }\n\n    var persistChild = mode === COMMIT_MODE.RELEASE_DISCARD ? (mode = COMMIT_MODE.RELEASE, false) : true;\n    var slotIndex = childView.slotIndex;\n\n    if(childView.isRoot()) {\n      // Ascending from the root slot causes the tree to grow by one level. Non-zero delta values for the child view can\n      // be disregarded, as we're absorbing the child view's final computed values in advance.\n      var slotCount = 1, slotSize = childSlot.size;\n      var recompute = childSlot.isRelaxed() ? slotCount : -1;\n      if(isDefined(expandParent)) {\n        slotCount += expandParent.padLeft + expandParent.padRight;\n        slotIndex += expandParent.padLeft;\n        slotSize += expandParent.sizeDelta;\n        if(recompute !== -1) {\n          recompute += max(expandParent.padRight, -1);\n        }\n        this.state.size += expandParent.sizeDelta;\n      }\n      var slots = new Array<Slot<T>>(slotCount);\n      slots[slotIndex] = mode === COMMIT_MODE.RESERVE ? childSlot.cloneAsPlaceholder(group) : childSlot;\n      parentSlot = new Slot<T>(group, slotSize, 0, recompute, childSlot.slots.length, slots);\n      parentView = View.create<T>(group, childView.offset, childView.anchor, 0, 0, 0, View.none<T>(), parentSlot);\n      hasChanges = false;\n    }\n    else {\n      parentView = childView.parent.ensureEditable(group);\n      parentSlot = parentView.slot;\n      var hasChanges = childView.hasUncommittedChanges();\n      var prepend = 0, append = 0;\n\n      // If the child wasn't already reserved with a placeholder slot, and no reservation has been requested, then there is\n      // nothing further that we need to do.\n      if(hasChanges || mode === COMMIT_MODE.RESERVE || isDefined(expandParent)) {\n        // Optional expansion parameters can add slots to the start or end of the parent slot.\n        if(isDefined(expandParent)) {\n          append = expandParent.padRight;\n          prepend = expandParent.padLeft;\n          slotIndex += prepend;\n        }\n\n        // Prepare the parent view and slot for modifications, and optionally append or prepend additional slots as needed.\n        if(!parentSlot.isEditable(group)) {\n          // Note that it is impossible for a slot to be a member of the current group if the view referencing it is not.\n          parentView.slot = parentSlot = isDefined(expandParent)\n            ? parentSlot.cloneWithAdjustedRange(group, prepend, append, false, true)\n            : parentSlot.cloneToGroup(group, true);\n        }\n        else if(isDefined(expandParent)) {\n          parentSlot.adjustRange(prepend, append, false);\n        }\n\n        if(isDefined(expandParent)) {\n          this.state.size += expandParent.sizeDelta;\n          if((prepend && parentView.anchor === OFFSET_ANCHOR.LEFT) || (!prepend && parentView.anchor === OFFSET_ANCHOR.RIGHT)) {\n            parentView.flipAnchor(this.state.size - childView.sizeDelta - expandParent.sizeDelta);\n          }\n        }\n\n        if(!this.committedOther && isAncestor(parentView, this.other, this.state.size)) {\n          this.commitOther(parentView, prepend);\n        }\n\n        // If the direction of expansion is the same as the current offset anchor, the offset anchor must be flipped so that\n        // the relative offset is not invalidated by the expanded size of the slot. If expanding both sides, offset\n        // adjustments will need to be calculated externally.\n        if(isDefined(expandParent)) {\n          parentSlot.size += expandParent.sizeDelta;\n          if(!parentView.isRoot()) {\n            parentView.sizeDelta += expandParent.sizeDelta;\n          }\n        }\n\n        // Pending changes to the list size and parent slot subcount need to be propagated upwards. Before any further\n        // operations are performed, the calling function should also commit changes from the other (left/right) view if\n        // they descend from this branch, or the returned slot/view may not reflect the true state of the list.\n        if(hasChanges) {\n          if(!parentView.isRoot()) {\n            parentView.sizeDelta += childView.sizeDelta;\n          }\n          parentSlot.subcount += childView.slotsDelta;\n          parentSlot.size += childView.sizeDelta;\n\n          if(parentSlot.isRelaxed() || childSlot.isRelaxed() || (childView.slotsDelta < 0 && slotIndex < parentSlot.slots.length - 1 && parentSlot.recompute === -1)) {\n            parentSlot.recompute = max(parentSlot.recompute, parentSlot.slots.length - slotIndex);\n          }\n          else {\n            parentSlot.recompute = -1;\n          }\n        }\n      }\n\n      // Avoid dragging around extraneous references to old state that will be invalidated by any subsequent writes to\n      // descendant nodes.\n      if(mode === COMMIT_MODE.RESERVE || (hasChanges && mode === COMMIT_MODE.NO_CHANGE && childSlot.isReserved())) {\n        var childSlotRef = <Slot<T>>parentSlot.slots[slotIndex];\n        if(childSlotRef.isReservedFor(group)) {\n          if(hasChanges) {\n            childSlotRef.size = childSlot.size;\n            childSlotRef.slots.length = childSlot.slots.length;\n          }\n        }\n        else {\n          var sum = childSlotRef.sum;\n          parentSlot.slots[slotIndex] = childSlotRef = childSlot.cloneAsPlaceholder(group);\n          childSlotRef.sum = sum;\n        }\n\n        if(childSlotRef.isReservedFor(group)) {\n          if(hasChanges) {\n            childSlotRef.updatePlaceholder(childSlot);\n          }\n        }\n        else {\n          parentSlot.slots[slotIndex] = childSlot.cloneAsPlaceholder(group);\n        }\n      }\n      else if(mode === COMMIT_MODE.RELEASE) {\n        if(childSlot.isReserved()) {\n          if(!parentSlot.isEditable(group)) {\n            parentView.slot = parentSlot = parentSlot.cloneToGroup(group, true);\n          }\n          if(childSlot.isEditable(group)) {\n            childSlot.group = group;\n          }\n          else {\n            childSlot = childSlot.cloneToGroup(group);\n          }\n          childSlot.sum = (<Slot<T>>parentSlot.slots[slotIndex]).sum;\n          parentSlot.slots[slotIndex] = childSlot;\n        }\n      }\n    }\n\n    // If the slot is flagged as relaxed, but it is now full, change it back to a regular node.\n    if(parentSlot.recompute !== -1 && parentSlot.size === CONST.BRANCH_FACTOR << (this.shift + CONST.BRANCH_INDEX_BITCOUNT)) {\n      parentSlot.recompute = -1;\n    }\n\n    if(!this.committedOther && isAncestor(parentView, this.other, this.state.size)) {\n      this.commitOther(parentView, 0);\n    }\n\n    if(persistChild/* || true*/) {\n      if(mode === COMMIT_MODE.RESERVE && !childSlot.isReserved()) {\n        if(childSlot.isEditable(group)) {\n          childSlot.group = -group;\n        }\n        else {\n          childSlot = childSlot.cloneToGroup(-group);\n        }\n      }\n\n      if(!childView.isEditable(group)) {\n        childView = childView.cloneToGroup(group);\n        if(this.shift === 0) {\n          setView(this.state, childView);\n        }\n      }\n\n      if(hasChanges || childSlot !== childView.slot || childView.parent !== parentView || this.otherCommitMode === -1) {\n        childView.slot = childSlot;\n        childView.parent = parentView;\n        childView.slotsDelta = 0;\n        childView.sizeDelta = 0;\n      }\n      childView.slotIndex = slotIndex;\n      this.previous = childView;\n    }\n    else if(childView.isEditable(group)) {\n      View.pushReusableView(childView);\n    }\n\n    this.current = parentView;\n    this.shift += CONST.BRANCH_INDEX_BITCOUNT;\n\n    return parentView;\n  }\n\n  commitOther(replacementParent: View<T>, slotIndexOffset: number): void {\n    var otherView = this.other;\n    if(slotIndexOffset === 0 && this.shift === 0 && !otherView.hasUncommittedChanges()\n      && otherView.parent === replacementParent\n      && (this.otherCommitMode === COMMIT_MODE.NO_CHANGE\n       || (this.otherCommitMode === COMMIT_MODE.RESERVE) === otherView.slot.isReserved())) {\n      this.committedOther = true;\n      this.otherCommittedChild = otherView;\n      return;\n    }\n\n    if(!otherView.isEditable(this.group)) {\n      otherView = otherView.cloneToGroup(this.group);\n    }\n\n    var anchor = otherView.anchor;\n    setView(this.state, this.other = this.otherCommitMode === COMMIT_MODE.RELEASE_DISCARD ? View.empty<T>(anchor) : otherView);\n    var worker = TreeWorker.defaultOther<T>().reset(this.state, otherView, this.group, -1);\n\n    while(worker.shift < this.shift) {\n      otherView = worker.ascend(this.otherCommitMode);\n    }\n\n    otherView.parent = replacementParent;\n    otherView.slotIndex += slotIndexOffset;\n    worker.ascend(this.otherCommitMode);\n    this.committedOther = true;\n    this.otherCommittedChild = worker.previous;\n    worker.dispose();\n  }\n\n  ascendToOrdinal(ordinal: number, mode: COMMIT_MODE, ensureBranchReserved: boolean): View<T> {\n    var view = this.current, target = view, branchFound = false;\n    var shift = this.shift;\n\n    do {\n      view = this.ascend(!this.hasOtherView() || (this.hasOtherView() && !this.committedOther) || mode === COMMIT_MODE.RESERVE ? mode : COMMIT_MODE.NO_CHANGE);\n      if(!branchFound) {\n        branchFound = isViewInRange(view, ordinal, this.state.size);\n        if(branchFound) {\n          shift = this.shift;\n          target = view;\n          if(ensureBranchReserved) {\n            mode = COMMIT_MODE.RESERVE;\n          }\n        }\n      }\n    } while(!branchFound || (mode === COMMIT_MODE.RESERVE && !view.isRoot() && !view.slot.isReserved()));\n\n    this.shift = shift;\n    this.current = target;\n    return target;\n  }\n\n  descendToOrdinal(ordinal: number, asWriteTarget: boolean): View<T>|undefined {\n    var view = this.current, shift = this.shift, out = this.slotResult;\n    var offset = view.anchor === OFFSET_ANCHOR.RIGHT ? invertOffset(view.offset, view.slot.size, this.state.size) : view.offset;\n    do {\n      view.slot.resolveChild(ordinal - offset, shift, out);\n      if(out.slot.isReserved()) {\n        while(view !== this.current) {\n          var discarded = view, view = discarded.parent;\n          View.pushReusableView(discarded);\n        }\n        return void 0;\n      }\n      shift -= CONST.BRANCH_INDEX_BITCOUNT;\n      offset += out.offset;\n      if(asWriteTarget) {\n        view.ensureSlotEditable().slots[out.index] = out.slot.cloneAsPlaceholder(this.group);\n        out.slot = out.slot.toReservedNode(this.group);\n      }\n      view = View.create<T>(this.group, offset, OFFSET_ANCHOR.LEFT, out.index, 0, 0, view, <Slot<T>>out.slot);\n    } while(shift > 0);\n\n    this.previous = this.current;\n    this.current = view;\n    this.shift = 0;\n\n    return view;\n  }\n\n  refocusView(ordinal: number, asAltView: boolean, asWriteTarget: boolean): View<T> {\n    ordinal = verifyIndex(this.state.size, ordinal);\n    var anchor = asAltView ? invertAnchor(this.current.anchor) : this.current.anchor;\n    this.ascendToOrdinal(ordinal, asAltView ? COMMIT_MODE.NO_CHANGE : COMMIT_MODE.RELEASE_DISCARD, asWriteTarget);\n    var view = this.descendToOrdinal(ordinal, asWriteTarget);\n\n    if(isUndefined(view)) {\n      this.reset(this.state, getOtherView(this.state, anchor), this.group, -1);\n      this.ascendToOrdinal(ordinal, COMMIT_MODE.NO_CHANGE, false);\n      view = <View<T>>this.descendToOrdinal(ordinal, asWriteTarget);\n    }\n    if(view.anchor !== anchor) {\n      view.flipAnchor(this.state.size);\n    }\n    setView(this.state, view);\n    return view;\n  }\n}\n\nexport function getAtOrdinal<T>(state: ListState<T>, ordinal: number): T|undefined {\n  var view = TreeWorker.focusOrdinal<T>(state, ordinal, false);\n  if(view === void 0) return void 0;\n  return <T>view.slot.slots[getLeafIndex(view, ordinal, state.size)];\n}\n\nexport function getLeafIndex<T>(view: View<T>, ordinal: number, listSize: number): number {\n  return ordinal - (view.anchor === OFFSET_ANCHOR.LEFT ? view.offset : invertOffset(view.offset, view.slot.size, listSize));\n}"]}