{"version":3,"sources":["../lib/ts/list/values.ts"],"names":[],"mappings":"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","file":"values.js","sourcesContent":["import {isUndefined} from '../shared/functions';\nimport {blockCopy, copyArray} from '../shared/array';\nimport {isMutable, nextId} from '../shared/ownership';\nimport {CONST, OFFSET_ANCHOR, normalizeIndex, verifyIndex} from './common';\nimport {ListState, cloneState, emptyState} from './state';\nimport {View} from './view';\nimport {Slot} from './slot';\nimport {increaseCapacity} from './capacity';\nimport {sliceList} from './slice';\nimport {concatLists} from './concat';\nimport {TreeWorker, getLeafIndex, getAtOrdinal} from './traversal';\n\nexport function setValueAtOrdinal<T>(state: ListState<T>, ordinal: number, value: T): void {\n  ordinal = verifyIndex(state.size, ordinal);\n  if(ordinal === -1) {\n    throw new Error(`Index ${ordinal} is out of range`);\n  }\n  var view = <View<T>>TreeWorker.focusOrdinal(state, ordinal, true);\n  if(!view.slot.isEditable(state.group)) {\n    view.slot = view.slot.cloneToGroup(state.group, true);\n  }\n  var index = getLeafIndex(view, ordinal, state.size);\n  view.slot.slots[index] = value;\n}\n\nexport function appendValues<T>(state: ListState<T>, values: T[]): ListState<T> {\n  var tail = TreeWorker.focusTail(state, true);\n  var innerIndex = tail.slot.size % CONST.BRANCH_FACTOR;\n  increaseCapacity(state, values.length, false).populate(values, innerIndex);\n  state.lastWrite = OFFSET_ANCHOR.RIGHT;\n  return state;\n}\n\nexport function prependValues<T>(state: ListState<T>, values: T[]): ListState<T> {\n  TreeWorker.focusHead(state, true);\n  increaseCapacity(state, values.length, true).populate(values, 0);\n  state.lastWrite = OFFSET_ANCHOR.LEFT;\n  return state;\n}\n\nexport function insertValues<T>(state: ListState<T>, ordinal: number, values: T[]): ListState<T> {\n  ordinal = normalizeIndex(state.size, ordinal);\n  if(ordinal === 0) return prependValues(state, values);\n  if(ordinal >= state.size) return appendValues(state, values);\n  var right = cloneState(state, nextId(), true);\n  sliceList(right, ordinal, right.size);\n  sliceList(state, 0, ordinal);\n  appendValues(state, values);\n  return concatLists(state, right);\n}\n\nexport function deleteValues<T>(state: ListState<T>, start: number, end: number): ListState<T> {\n  start = normalizeIndex(state.size, start);\n  end = normalizeIndex(state.size, end);\n  if(start >= end) return state;\n  if(start === 0 || end === state.size) {\n    if(end - start === state.size) {\n      return emptyState<T>(isMutable(state.owner));\n    }\n    if(start > 0) {\n      sliceList(state, 0, start);\n    }\n    else {\n      sliceList(state, end, state.size);\n    }\n    return state;\n  }\n  var right = cloneState(state, nextId(), true);\n  sliceList(state, 0, start);\n  sliceList(right, end, right.size);\n  state = concatLists(state, right);\n  return state;\n}\n\nexport class ListIterator<T> implements IterableIterator<T> {\n  private _index = 0;\n  constructor(private _state: ListState<T>) {}\n\n  next(): IteratorResult<T> {\n    if(this._index >= this._state.size) {\n      return {value: <any>void 0, done: true};\n    }\n    return {\n      value: <any>getAtOrdinal(this._state, this._index++),\n      done: false\n    };\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return new ListIterator<T>(this._state);\n  }\n}\n\nexport function createIterator<T>(state: ListState<T>): IterableIterator<T> {\n  return new ListIterator(state);\n}\n\nexport function createArray<T>(state: ListState<T>): T[] {\n  var map = new Map<Slot<T>, Map<number, Slot<T>>>();\n  var [root, depth] = getRoot(state, map);\n  if(depth === 0) {\n    return copyArray(<T[]>root.slots);\n  }\n  var array = new Array<T>(state.size);\n  populateArray(array, root, map, depth - 1, 0);\n  return array;\n}\n\nfunction getRoot<T>(state: ListState<T>, map: Map<Slot<T>, Map<number, Slot<T>>>): [Slot<T>, number] {\n  var left = state.left;\n  var right = state.right;\n  var root: Slot<T> = <any>void 0;\n  var depth = 0;\n\n  if(left.isNone()) {\n    if(right.isRoot()) {\n      return [right.slot, 0];\n    }\n  }\n  else {\n    if(right.isNone() && left.isRoot()) {\n      return [left.slot, 0];\n    }\n    [root, depth] = populateViewMap(left, map);\n  }\n\n  if(!right.isNone()) {\n    [root, depth] = populateViewMap(right, map);\n  }\n\n  return [root, depth];\n}\n\nfunction populateViewMap<T>(view: View<T>, map: Map<Slot<T>, Map<number, Slot<T>>>): [Slot<T>, number] {\n  var root: Slot<T>, depth = 0;\n  do {\n    addViewToMap(view, map);\n    root = view.slot;\n    view = view.parent;\n    depth++;\n  } while(!view.isNone());\n  return [root, depth];\n}\n\nfunction addViewToMap<T>(view: View<T>, map: Map<Slot<T>, Map<number, Slot<T>>>): void {\n  var item = map.get(view.parent.slot);\n  if(isUndefined(item)) {\n    item = new Map<number, Slot<T>>();\n    map.set(view.parent.slot, item);\n  }\n  item.set(view.slotIndex, view.slot);\n}\n\nfunction getSlotFromMap<T>(map: Map<Slot<T>, Map<number, Slot<T>>>, slot: Slot<T>, slotIndex: number): Slot<T>|undefined {\n  var item = map.get(slot);\n  return item && item.get(slotIndex);\n}\n\nfunction populateArray<T>(array: T[], node: Slot<T>, map: Map<Slot<T>, Map<number, Slot<T>>>, level: number, offset: number): number {\n  var slots = <Slot<T>[]>node.slots;\n  for(var i = 0, c = 0; i < slots.length; i++) {\n    var child = getSlotFromMap(map, node, i) || slots[i];\n    if(level === 1) {\n      var elements = child.slots;\n      blockCopy(elements, array, 0, offset + c, elements.length);\n      c += elements.length;\n    }\n    else {\n      c += populateArray(array, child, map, level - 1, offset + c);\n    }\n  }\n  return c;\n}\n"]}