{"version":3,"sources":["../lib/ts/list/slice.ts"],"names":[],"mappings":"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","file":"slice.js","sourcesContent":["import {COMMIT_MODE, OFFSET_ANCHOR, invertOffset, normalizeIndex} from './common';\nimport {ListState, getView, setView} from './state';\nimport {View} from './view';\nimport {ExpansionParameters} from './slot';\nimport {TreeWorker, isViewInRange} from './traversal';\n\nexport function sliceList<T>(state: ListState<T>, start: number, end: number): void {\n  start = normalizeIndex(state.size, start);\n  end = normalizeIndex(state.size, end);\n\n  if(end <= 0 || start >= end || start >= state.size) {\n    if(state.size > 0) {\n      state.left = View.empty<T>(OFFSET_ANCHOR.LEFT);\n      state.right = View.empty<T>(OFFSET_ANCHOR.LEFT);\n      state.size = 0;\n      state.lastWrite = OFFSET_ANCHOR.RIGHT;\n    }\n    return;\n  }\n\n  if(end >= state.size && start <= 0) {\n    return;\n  }\n\n  if(start < 0) start = 0;\n  if(end >= state.size) end = state.size;\n\n  sliceInternal(state, start, end);\n}\n\nfunction sliceInternal<T>(state: ListState<T>, start: number, end: number): void {\n  var doneLeft = start === 0,\n      doneRight = end === state.size,\n      focusedLeft = false, focusedRight = false;\n\n  var left: View<T>, right: View<T>;\n  if(state.left.isNone()) {\n    right = getView(state, OFFSET_ANCHOR.RIGHT, true);\n    if(!isViewInRange(right, end - 1, state.size)) {\n      left = getView(state, OFFSET_ANCHOR.LEFT, true, start);\n      right = isViewInRange(left, end - 1, state.size) ? left : TreeWorker.refocusView(state, right, end - 1, false, true);\n    }\n    else if(isViewInRange(right, start, state.size)) {\n      left = right;\n    }\n    else {\n      left = getView(state, OFFSET_ANCHOR.LEFT, true, start);\n      right = state.right;\n    }\n    focusedLeft = true;\n    focusedRight = true;\n  }\n  else if(state.right.isNone()) {\n    left = getView(state, OFFSET_ANCHOR.LEFT, true, start);\n    if(!isViewInRange(left, start, state.size)) {\n      right = getView(state, OFFSET_ANCHOR.RIGHT, true, end - 1);\n      left = isViewInRange(right, start, state.size) ? right : TreeWorker.refocusView(state, left, start, false, true);\n    }\n    else if(isViewInRange(left, end - 1, state.size)) {\n      right = left;\n    }\n    else {\n      right = getView(state, OFFSET_ANCHOR.RIGHT, true, end - 1);\n      left = state.left;\n    }\n    focusedLeft = true;\n    focusedRight = true;\n  }\n  else {\n    left = state.left;\n    right = state.right;\n  }\n\n  if(!focusedLeft) {\n    if(!isViewInRange(left, start, state.size)) {\n      left = TreeWorker.refocusView(state, left, start, false, true);\n      right = state.right;\n    }\n    focusedLeft = true;\n    if(isViewInRange(left, end - 1, state.size)) {\n      right = left;\n      focusedRight = true;\n    }\n  }\n\n  var areSame = left === right;\n  if(!focusedRight && !isViewInRange(right, end - 1, state.size)) {\n    right = TreeWorker.refocusView(state, right, end - 1, false, true);\n    left = state.left;\n  }\n  else if(!right.isEditable(state.group)) {\n    setView(state, right = right.cloneToGroup(state.group));\n    if(areSame) left = right;\n  }\n  if(!left.isEditable(state.group)) {\n    setView(state, left = left.cloneToGroup(state.group));\n    if(areSame) right = left;\n  }\n\n  if(areSame) {\n    var leftOffset = left.anchor === OFFSET_ANCHOR.LEFT ? left.offset : invertOffset(left.offset, left.slot.size, state.size);\n    if(leftOffset === start) {\n      doneLeft = true;\n    }\n    if(left.slot.size === end - leftOffset) {\n      doneRight = true;\n    }\n  }\n\n  var rightBound = doneRight ? 0 : calculateRightEnd(right, state.size);\n  var leftOffset = getOffset(left, OFFSET_ANCHOR.LEFT, state.size);\n  var truncateLeft = doneLeft || start <= leftOffset ? 0 : leftOffset - start;\n  var truncateRight = doneRight || end >= rightBound ? 0 : end - rightBound;\n  var isRoot = (doneLeft ? right : left).isRoot();\n  var leftWorker: TreeWorker<T> = <any>void 0;\n  var rightWorker: TreeWorker<T> = <any>void 0;\n\n  if(truncateLeft) {\n    left.adjustSlotRange(truncateLeft, left === right ? truncateRight : 0, true);\n    if(isRoot || leftOffset === 0 || left === right) {\n      doneLeft = true;\n    }\n  }\n\n  if(truncateRight) {\n    if(!truncateLeft || left !== right) {\n      right.adjustSlotRange(0, truncateRight, true);\n    }\n    if(isRoot || right.offset === 0 || left === right) {\n      doneRight = true;\n    }\n  }\n  else if(!truncateLeft && left === right) {\n    doneLeft = true;\n    doneRight = true;\n  }\n\n  if(!doneLeft || !doneRight) {\n    leftWorker = TreeWorker.defaultPrimary<T>().reset(state, left, state.group, -1);\n    rightWorker = TreeWorker.defaultSecondary<T>().reset(state, right, state.group, -1);\n  }\n\n  var noAscent = doneLeft && doneRight;\n  while(!doneLeft || !doneRight) {\n    if(!doneRight) {\n      rightBound = calculateRightEnd(right, state.size);\n    }\n\n    truncateLeft = doneLeft ? 0 : -left.slotIndex;\n    truncateRight = doneRight ? 0 : right.slotIndex - right.parent.slotCount() + 1;\n\n    var areSiblings = left !== right && left.parent === right.parent;\n\n    left = leftWorker.ascend(COMMIT_MODE.RESERVE, doneLeft && !areSiblings ? void 0 : ExpansionParameters.get(truncateLeft, areSiblings ? truncateRight : 0, 0));\n    leftWorker.previous.offset = 0;\n    if(!doneLeft) {\n      if(getOffset(left, OFFSET_ANCHOR.LEFT, state.size) === 0) {\n        doneLeft = true;\n      }\n    }\n\n    if(areSiblings) {\n      right.parent = left;\n      right.slotIndex += truncateLeft;\n      doneLeft = true;\n      doneRight = true;\n    }\n\n    right = rightWorker.ascend(COMMIT_MODE.RESERVE, doneRight ? void 0 : ExpansionParameters.get(0, truncateRight, 0));\n    rightWorker.previous.offset = 0;\n    isRoot = (doneLeft ? right : left).isRoot();\n    if(!doneRight && !isRoot && getOffset(right, OFFSET_ANCHOR.RIGHT, state.size) === 0) {\n      doneRight = true;\n    }\n  }\n\n  if(!isRoot && left === right) {\n    left.setAsRoot();\n    if(noAscent) {\n      var otherView = state.left === left ? state.right : state.left;\n      if(!otherView.isNone()) {\n        setView(state, View.empty<T>(otherView.anchor));\n      }\n    }\n  }\n\n  state.size = end - start;\n  state.lastWrite = start > 0 ? OFFSET_ANCHOR.LEFT : OFFSET_ANCHOR.RIGHT;\n\n}\n\nfunction calculateRightEnd<T>(view: View<T>, listSize: number): number {\n  return view.anchor === OFFSET_ANCHOR.LEFT\n    ? view.offset + view.slot.size\n    : listSize - view.offset;\n}\n\nfunction getOffset(view: View<any>, anchor: OFFSET_ANCHOR, listSize: number): number {\n  return view.anchor === anchor ? view.offset : invertOffset(view.offset, view.slot.size, listSize);\n}\n"]}