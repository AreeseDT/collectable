{"version":3,"sources":["../lib/ts/set/set.ts"],"names":[],"mappings":"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","file":"set.js","sourcesContent":["import {nextId, batch, isMutable} from '../shared/ownership';\r\nimport {isDefined, isUndefined} from '../shared/functions';\r\nimport {Iterable, isIterable} from '../shared/common';\r\n\r\nexport type PSetFunction<T> = (map: PersistentSet<T>) => PersistentSet<T>|void;\r\n\r\nexport interface PSetState<T> {\r\n  set: Set<T>;\r\n  owner: number;\r\n  group: number;\r\n}\r\n\r\nfunction clone<T>(state: PSetState<T>, mutable = false): PSetState<T> {\r\n  return {\r\n    set: new Set<T>(state.set),\r\n    owner: mutable ? batch.owner || -1 : 0,\r\n    group: nextId()\r\n  };\r\n}\r\n\r\nfunction createSet<T>(): PersistentSet<T> {\r\n  return new PersistentSet<T>({\r\n    set: new Set<T>(),\r\n    group: nextId(),\r\n    owner: batch.owner\r\n  });\r\n}\r\n\r\nexport class PersistentSet<T> implements Iterable<T> {\r\n  private _state: PSetState<T>;\r\n  private static _empty = PersistentSet.create();\r\n\r\n  static create(create?: PSetFunction<any>): PersistentSet<any>\r\n  static create<T>(create?: PSetFunction<T>): PersistentSet<T>\r\n  static create<T>(create?: PSetFunction<T>): PersistentSet<T> {\r\n    if(isUndefined(create)) {\r\n      return createSet<T>();\r\n    }\r\n    return batch<PersistentSet<T>>(owner => {\r\n      var set = createSet<T>();\r\n      return create(set) || set;\r\n    });\r\n  }\r\n\r\n  static empty<T>(): PersistentSet<T> {\r\n    return batch.active ? PersistentSet.create() : PersistentSet._empty;\r\n  }\r\n\r\n  constructor(state: PSetState<T>) {\r\n    this._state = state;\r\n  }\r\n\r\n  private prep(): PersistentSet<T> {\r\n    return isMutable(this._state.owner) ? this : this.clone();\r\n  }\r\n\r\n  get size() {\r\n    return this._state.set.size;\r\n  }\r\n\r\n  get mutable() {\r\n    return isMutable(this._state.owner);\r\n  }\r\n\r\n  batch(callback: PSetFunction<T>): PersistentSet<T> {\r\n    batch.start();\r\n    var set = this.asMutable();\r\n    set = callback(set) || set;\r\n    if(batch.end()) {\r\n      set._state.owner = 0;\r\n    }\r\n    return set;\r\n  }\r\n\r\n  asMutable(): PersistentSet<T> {\r\n    return isMutable(this._state.owner) ? this : new PersistentSet<T>(clone<T>(this._state, true));\r\n  }\r\n\r\n  asImmutable(): PersistentSet<T> {\r\n    return isMutable(this._state.owner) ? new PersistentSet<T>(clone<T>(this._state, false)) : this;\r\n  }\r\n\r\n  clone(): PersistentSet<T> {\r\n    return new PersistentSet<T>(clone(this._state));\r\n  }\r\n\r\n  add(value: T): PersistentSet<T> {\r\n    var set = this.prep();\r\n    set._state.set.add(value);\r\n    return set;\r\n  }\r\n\r\n  remove(value: T): PersistentSet<T> {\r\n    var set = this.prep();\r\n    set._state.set.delete(value);\r\n    return set;\r\n  }\r\n\r\n  has(value: T): boolean {\r\n    return this._state.set.has(value);\r\n  }\r\n\r\n  toArray(): T[] {\r\n    var i = 0, array: any = new Array<any>(this.size);\r\n    for(var it = this.values(), current = it.next(); !current.done; current = it.next()) {\r\n      array[i++] = current.value;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  values(): IterableIterator<T> {\r\n    return this._state.set.values();\r\n  }\r\n\r\n  [Symbol.iterator](): IterableIterator<T> {\r\n    return this._state.set[Symbol.iterator]();\r\n  }\r\n\r\n  private _serializing: any = void 0;\r\n  toJS(): T[] {\r\n    if(isDefined(this._serializing)) {\r\n      return this._serializing;\r\n    }\r\n    var i = 0, array: any = new Array<any>(this.size);\r\n    this._serializing = array;\r\n    for(var it = this.values(), current = it.next(); !current.done; current = it.next()) {\r\n      var value = current.value;\r\n      array[i++] = isIterable<T>(value) ? value.toJS() : value;\r\n    }\r\n    this._serializing = void 0;\r\n    return array;\r\n  }\r\n}"]}