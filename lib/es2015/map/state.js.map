{"version":3,"sources":["../lib/ts/map/state.ts"],"names":[],"mappings":";AAAA,mDAAkD;AAElD;IACE,YACS,MAAiB,EACjB,KAAa,EACb,KAAa;QAFb,WAAM,GAAN,MAAM,CAAW;QACjB,UAAK,GAAL,KAAK,CAAQ;QACb,UAAK,GAAL,KAAK,CAAQ;IACnB,CAAC;CACL;AAND,4BAMC;AAED,oBAAiC,KAAqB,EAAE,OAAO,GAAG,KAAK;IACrE,MAAM,CAAC;QACL,MAAM,EAAE,IAAI,GAAG,CAAO,KAAK,CAAC,MAAM,CAAC;QACnC,KAAK,EAAE,OAAO,GAAG,iBAAK,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC;QACtC,KAAK,EAAE,kBAAM,EAAE;KAChB,CAAC;AACJ,CAAC;AAND,gCAMC;AAED;IACE,MAAM,CAAC,IAAI,QAAQ,CACjB,IAAI,GAAG,EAAQ,EACf,kBAAM,EAAE,EACR,iBAAK,CAAC,KAAK,CACZ,CAAC;AACJ,CAAC;AAND,kCAMC;AAED;IACE,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAFD,gCAEC;AAED,MAAM,MAAM,GAAG,WAAW,EAAY,CAAC","file":"state.js","sourcesContent":["import {nextId, batch} from '../shared/ownership';\r\n\r\nexport class MapState<K, V> {\r\n  constructor(\r\n    public values: Map<K, V>,\r\n    public owner: number,\r\n    public group: number\r\n  ) {}\r\n}\r\n\r\nexport function cloneState<K, V>(state: MapState<K, V>, mutable = false): MapState<K, V> {\r\n  return {\r\n    values: new Map<K, V>(state.values),\r\n    owner: mutable ? batch.owner || -1 : 0,\r\n    group: nextId()\r\n  };\r\n}\r\n\r\nexport function createState<K, V>(): MapState<K, V> {\r\n  return new MapState<K, V>(\r\n    new Map<K, V>(),\r\n    nextId(),\r\n    batch.owner\r\n  );\r\n}\r\n\r\nexport function emptyState<K, V>(): MapState<K, V> {\r\n  return _empty;\r\n}\r\n\r\nconst _empty = createState<any, any>();"]}