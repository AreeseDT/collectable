import { COMMIT_MODE, OFFSET_ANCHOR } from './common';
import { View } from './view';
import { Slot, ExpansionParameters } from './slot';
import { ListState } from './state';
export declare function isViewInRange<T>(view: View<T>, ordinal: number, listSize: number): boolean;
export declare class TreeWorker<T> {
    private static _defaults;
    private static _getDefaults();
    static defaultPrimary<T>(): TreeWorker<T>;
    static defaultSecondary<T>(): TreeWorker<T>;
    static defaultOther<T>(): TreeWorker<T>;
    static defaultTemporary<T>(): TreeWorker<T>;
    static refocusView<T>(state: ListState<T>, view: View<T>, ordinal: number, asAltView: boolean, asWriteTarget: boolean): View<T>;
    static focusOrdinal<T>(state: ListState<T>, ordinal: number, asWriteTarget: boolean): View<T> | undefined;
    static focusEdge<T>(state: ListState<T>, edge: OFFSET_ANCHOR, asWriteTarget: boolean): View<T>;
    static focusHead<T>(state: ListState<T>, asWriteTarget: boolean): View<T>;
    static focusTail<T>(state: ListState<T>, asWriteTarget: boolean): View<T>;
    static focusView<T>(state: ListState<T>, ordinal: number, anchor: OFFSET_ANCHOR, asWriteTarget: boolean): View<T>;
    state: ListState<T>;
    previous: View<T>;
    current: View<T>;
    other: View<T>;
    otherCommittedChild: View<T>;
    otherCommitMode: COMMIT_MODE;
    committedOther: boolean;
    slotResult: {
        slot: Slot<T>;
        index: number;
        offset: number;
    };
    group: number;
    shift: number;
    isRoot(): boolean;
    hasOtherView(): boolean;
    isOtherViewUncommitted(): boolean;
    reset(state: ListState<T>, view: View<T>, group: any, otherCommitMode?: COMMIT_MODE): TreeWorker<T>;
    dispose(): void;
    ascend(mode: COMMIT_MODE, expandParent?: ExpansionParameters): View<T>;
    commitOther(replacementParent: View<T>, slotIndexOffset: number): void;
    ascendToOrdinal(ordinal: number, mode: COMMIT_MODE, ensureBranchReserved: boolean): View<T>;
    descendToOrdinal(ordinal: number, asWriteTarget: boolean): View<T> | undefined;
    refocusView(ordinal: number, asAltView: boolean, asWriteTarget: boolean): View<T>;
}
export declare function getAtOrdinal<T>(state: ListState<T>, ordinal: number): T | undefined;
export declare function getLeafIndex<T>(view: View<T>, ordinal: number, listSize: number): number;
