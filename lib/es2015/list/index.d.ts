export { PersistentList } from './list';
export { ListState } from './state';
import { ListState } from './state';
export declare type ListMutationCallback<T> = (list: ListState<T>) => void;
export declare type UpdateCallback<T> = (value: T | undefined) => T;
export declare function emptyList<T>(): ListState<T>;
export declare function isList<T>(collection: Object): collection is ListState<T>;
export declare function isEmpty<T>(list: ListState<T>): boolean;
export declare function fromArray<T>(values: T[]): ListState<T>;
export declare function _exec<T>(state: ListState<T>, fn: (state: ListState<T>) => ListState<T> | void): ListState<T>;
export declare function getSize<T>(list: ListState<T>): number;
export declare function hasIndex<T>(index: number, list: ListState<T>): boolean;
export declare function hasIn<T>(path: any[], list: ListState<T>): boolean;
export declare function asMutable<T>(list: ListState<T>): ListState<T>;
export declare function asImmutable<T>(list: ListState<T>): ListState<T>;
export declare function freeze<T>(list: ListState<T>): ListState<T>;
export declare function thaw<T>(list: ListState<T>): ListState<T>;
export declare function updateList<T>(callback: ListMutationCallback<T>, list: ListState<T>): ListState<T>;
export declare function updateIndex<T>(index: number, callback: UpdateCallback<T>, list: ListState<T>): ListState<T>;
export declare function get<T>(index: number, list: ListState<T>): T | undefined;
export declare function getIn<T>(path: any[], list: ListState<T>): any | undefined;
export declare function set<T>(index: number, value: T, list: ListState<T>): ListState<T>;
export declare function setIn<T>(path: any[], value: any, list: ListState<T>): ListState<T>;
export declare function append<T>(value: T, list: ListState<T>): ListState<T>;
export declare function appendArray<T>(values: T[], list: ListState<T>): ListState<T>;
export declare function prepend<T>(value: T, list: ListState<T>): ListState<T>;
export declare function prependArray<T>(values: T[], list: ListState<T>): ListState<T>;
export declare function insert<T>(index: number, value: T, list: ListState<T>): ListState<T>;
export declare function insertArray<T>(index: number, values: T[], list: ListState<T>): ListState<T>;
export declare function remove<T>(index: number, list: ListState<T>): ListState<T>;
export declare function removeRange<T>(start: number, end: number, list: ListState<T>): ListState<T>;
export declare function pop<T>(list: ListState<T>): ListState<T>;
export declare function popFront<T>(list: ListState<T>): ListState<T>;
export declare const shift: typeof popFront;
export declare function skip<T>(count: number, list: ListState<T>): ListState<T>;
export declare function take<T>(count: number, list: ListState<T>): ListState<T>;
export declare function slice<T>(start: number, end: number, list: ListState<T>): ListState<T>;
export declare function concat<T>(left: ListState<T>, right: ListState<T>): ListState<T>;
export declare function concatMany<T>(lists: ListState<T>[]): ListState<T>;
export declare function toArray<T>(list: ListState<T>): T[];
export declare function join<T>(separator: any, list: ListState<T>): string;
export declare function toIterable<T>(list: ListState<T>): IterableIterator<T>;
export declare function toJS<T>(list: ListState<T>): T[];
export declare function isDefaultEmptyList(list: ListState<any>): boolean;
export { append as push };
export { prepend as unshift };
export { prepend as cons };
