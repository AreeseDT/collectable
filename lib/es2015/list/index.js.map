{"version":3,"sources":["../lib/ts/list/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["export {PersistentList} from './list';\r\nexport {ListState} from './state';\r\n\r\nimport {batch, isMutable, nextId} from '../shared/ownership';\r\nimport {isDefined} from '../shared/functions';\r\nimport {getDeep, setDeep, hasDeep} from '../shared/deep';\r\nimport {CONST, OFFSET_ANCHOR, verifyIndex} from './common';\r\nimport {appendValues, prependValues, setValueAtOrdinal, insertValues, deleteValues, createArray, createIterator} from './values';\r\nimport {getAtOrdinal} from './traversal';\r\nimport {concatLists} from './concat';\r\nimport {sliceList} from './slice';\r\nimport {ListState, cloneState, emptyState, ensureMutable, ensureImmutable} from './state';\r\n\r\nexport type ListMutationCallback<T> = (list: ListState<T>) => void;\r\nexport type UpdateCallback<T> = (value: T|undefined) => T;\r\n\r\nconst _empty = emptyState<any>(false);\r\n\r\nexport function emptyList<T>(): ListState<T> {\r\n  return _empty;\r\n}\r\n\r\nexport function isList<T>(collection: Object): collection is ListState<T> {\r\n  return collection instanceof ListState;\r\n}\r\n\r\nexport function isEmpty<T>(list: ListState<T>): boolean {\r\n  return list.size === 0;\r\n}\r\n\r\nexport function fromArray<T>(values: T[]): ListState<T> {\r\n  if(!Array.isArray(values)) {\r\n    throw new Error('First argument must be an array of values');\r\n  }\r\n  var state = emptyState<T>(true);\r\n  if(values.length > 0) {\r\n    appendValues(state, values);\r\n  }\r\n  return ensureImmutable(state, true);\r\n}\r\n\r\nexport function _exec<T>(state: ListState<T>, fn: (state: ListState<T>) => ListState<T>|void): ListState<T> {\r\n  var immutable = !isMutable(state.owner);\r\n  if(immutable) {\r\n    state = ensureMutable(state);\r\n  }\r\n  var nextState = fn(state);\r\n  if(isDefined(nextState)) {\r\n    if(immutable) {\r\n      state = <ListState<T>>nextState;\r\n    }\r\n    else {\r\n      state = <ListState<T>>nextState;\r\n    }\r\n  }\r\n  return immutable ? ensureImmutable(state, true) : state;\r\n}\r\n\r\nexport function getSize<T>(list: ListState<T>): number {\r\n  return list.size;\r\n}\r\n\r\nexport function hasIndex<T>(index: number, list: ListState<T>): boolean {\r\n  return verifyIndex(list.size, index) !== -1;\r\n}\r\n\r\nexport function hasIn<T>(path: any[], list: ListState<T>): boolean {\r\n  return hasDeep(list, path);\r\n}\r\n\r\nexport function asMutable<T>(list: ListState<T>): ListState<T> {\r\n  return isMutable(list.owner) ? list : ensureMutable(list);\r\n}\r\n\r\nexport function asImmutable<T>(list: ListState<T>): ListState<T> {\r\n  return isMutable(list.owner) ? ensureImmutable(list, false) : list;\r\n}\r\n\r\nexport function freeze<T>(list: ListState<T>): ListState<T> {\r\n  return isMutable(list.owner)\r\n    ? (ensureImmutable(list, true), list)\r\n    : list;\r\n}\r\n\r\nexport function thaw<T>(list: ListState<T>): ListState<T> {\r\n  if(!isMutable(list.owner)) {\r\n    list.owner = -1;\r\n  }\r\n  return list;\r\n}\r\n\r\nexport function updateList<T>(callback: ListMutationCallback<T>, list: ListState<T>): ListState<T> {\r\n  batch.start();\r\n  list = asMutable(list);\r\n  callback(list);\r\n  if(batch.end()) {\r\n    list.owner = 0;\r\n  }\r\n  return list;\r\n}\r\n\r\nexport function updateIndex<T>(index: number, callback: UpdateCallback<T>, list: ListState<T>): ListState<T> {\r\n  var oldv = get(index, list);\r\n  var newv = callback(oldv);\r\n  return newv === oldv ? list : set(index, newv, list);\r\n}\r\n\r\nexport function get<T>(index: number, list: ListState<T>): T|undefined {\r\n  return getAtOrdinal(list, index);\r\n}\r\n\r\nexport function getIn<T>(path: any[], list: ListState<T>): any|undefined {\r\n  return getDeep(list, path);\r\n}\r\n\r\nexport function set<T>(index: number, value: T, list: ListState<T>): ListState<T> {\r\n  return _exec(list, state => setValueAtOrdinal(state, index, value));\r\n}\r\n\r\nexport function setIn<T>(path: any[], value: any, list: ListState<T>): ListState<T> {\r\n  return <any>setDeep(list, path, 0, value);\r\n}\r\n\r\nexport function append<T>(value: T, list: ListState<T>): ListState<T> {\r\n  var immutable = !isMutable(list.owner);\r\n  if(immutable) {\r\n    list = ensureMutable(list);\r\n  }\r\n  var tail = list.right;\r\n  var slot = tail.slot;\r\n  if(tail.group !== 0 && tail.offset === 0 && slot.group !== 0 && slot.size < CONST.BRANCH_FACTOR) {\r\n    list.lastWrite = OFFSET_ANCHOR.RIGHT;\r\n    list.size++;\r\n    if(slot.group === list.group) {\r\n      slot.adjustRange(0, 1, true);\r\n    }\r\n    else {\r\n      slot = slot.cloneWithAdjustedRange(list.group, 0, 1, true, true);\r\n      if(tail.group !== list.group) {\r\n        tail = tail.cloneToGroup(list.group);\r\n        list.right = tail;\r\n      }\r\n      tail.slot = slot;\r\n    }\r\n    tail.sizeDelta++;\r\n    tail.slotsDelta++;\r\n    slot.slots[slot.slots.length - 1] = arguments[0];\r\n  }\r\n  else {\r\n    appendValues(list, [value]);\r\n  }\r\n  return immutable ? ensureImmutable(list, true) : list;\r\n}\r\n\r\nexport function appendArray<T>(values: T[], list: ListState<T>): ListState<T> {\r\n  return values.length === 0 ? list\r\n    : _exec(list, state => appendValues(state, values));\r\n}\r\n\r\nexport function prepend<T>(value: T, list: ListState<T>): ListState<T> {\r\n  var immutable = !isMutable(list.owner);\r\n  if(immutable) {\r\n    list = ensureMutable(list);\r\n  }\r\n  var head = list.left;\r\n  var slot = head.slot;\r\n  if(head.group !== 0 && head.offset === 0 && slot.group !== 0 && slot.size < CONST.BRANCH_FACTOR) {\r\n    list.lastWrite = OFFSET_ANCHOR.LEFT;\r\n    list.size++;\r\n    if(slot.group === list.group) {\r\n      slot.adjustRange(1, 0, true);\r\n    }\r\n    else {\r\n      slot = slot.cloneWithAdjustedRange(list.group, 1, 0, true, true);\r\n      if(head.group !== list.group) {\r\n        head = head.cloneToGroup(list.group);\r\n        list.left = head;\r\n      }\r\n      head.slot = slot;\r\n    }\r\n    head.sizeDelta++;\r\n    head.slotsDelta++;\r\n    slot.slots[0] = arguments[0];\r\n  }\r\n  else {\r\n    prependValues(list, [value]);\r\n  }\r\n  return immutable ? ensureImmutable(list, true) : list;\r\n}\r\n\r\nexport function prependArray<T>(values: T[], list: ListState<T>): ListState<T> {\r\n  return values.length === 0 ? list\r\n    : _exec(list, state => prependValues(state, values));\r\n}\r\n\r\nexport function insert<T>(index: number, value: T, list: ListState<T>): ListState<T> {\r\n  return _exec(list, state => insertValues(state, index, [value]));\r\n}\r\n\r\nexport function insertArray<T>(index: number, values: T[], list: ListState<T>): ListState<T> {\r\n  if(values.length === 0) return list;\r\n  return _exec(list, state => insertValues(state, index, values));\r\n}\r\n\r\nexport function remove<T>(index: number, list: ListState<T>): ListState<T> {\r\n  return list.size === 0 ? list\r\n    : _exec(list, state => deleteValues(state, index, index + 1));\r\n}\r\n\r\nexport function removeRange<T>(start: number, end: number, list: ListState<T>): ListState<T> {\r\n  return list.size === 0 ? list\r\n    : _exec(list, state => deleteValues(state, start, end));\r\n}\r\n\r\nexport function pop<T>(list: ListState<T>): ListState<T> {\r\n  return list.size === 0 ? list\r\n    : _exec(list, state => sliceList(state, 0, -1));\r\n}\r\n\r\nexport function popFront<T>(list: ListState<T>): ListState<T> {\r\n  return list.size === 0 ? list\r\n    : _exec(list, state => sliceList(state, 1, state.size));\r\n}\r\nexport const shift = popFront;\r\n\r\nexport function skip<T>(count: number, list: ListState<T>): ListState<T> {\r\n  return list.size === 0 || count === 0 ? list\r\n    : _exec(list, state => sliceList(state, count, state.size));\r\n}\r\n\r\nexport function take<T>(count: number, list: ListState<T>): ListState<T> {\r\n  return list.size === 0 || count >= list.size ? list\r\n    : _exec(list, state => sliceList(state, 0, count));\r\n}\r\n\r\nexport function slice<T>(start: number, end: number, list: ListState<T>): ListState<T> {\r\n  if(end === 0) end = list.size;\r\n  return list.size === 0 ? list\r\n    : _exec(list, state => sliceList(state, start, end));\r\n}\r\n\r\nexport function concat<T>(left: ListState<T>, right: ListState<T>): ListState<T> {\r\n  return _exec(left, state => concatLists(state, cloneState(right, nextId(), true)));\r\n}\r\n\r\nexport function concatMany<T>(lists: ListState<T>[]): ListState<T> {\r\n  var list: ListState<T> = lists[0];\r\n  var other: ListState<T>;\r\n  switch(lists.length) {\r\n    case 1:\r\n      other = lists[1];\r\n      _exec(list, state => concatLists(state, cloneState(other, nextId(), true)));\r\n    default:\r\n      return _exec(list, function(state) {\r\n        for(var i = 1; i < lists.length; i++) {\r\n          state = concatLists(state, cloneState(lists[i], nextId(), true));\r\n        }\r\n        return state;\r\n      });\r\n  }\r\n}\r\n\r\nexport function toArray<T>(list: ListState<T>): T[] {\r\n  return createArray(list);\r\n}\r\n\r\nexport function join<T>(separator: any, list: ListState<T>): string {\r\n  return toArray(list).join(separator);\r\n}\r\n\r\nexport function toIterable<T>(list: ListState<T>): IterableIterator<T> {\r\n  return createIterator(list);\r\n}\r\n\r\nexport function toJS<T>(list: ListState<T>): T[] {\r\n  return toArray(list);\r\n}\r\n\r\nexport function isDefaultEmptyList(list: ListState<any>): boolean {\r\n  return list === _empty;\r\n}\r\n\r\n// ALIASES\r\n\r\nexport {append as push};\r\nexport {prepend as unshift};\r\nexport {prepend as cons};\r\n"]}