{"version":3,"sources":["../lib/ts/list/state.ts"],"names":[],"mappings":"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","file":"state.js","sourcesContent":["import {nextId, batch, isMutable} from '../shared/ownership';\nimport {OFFSET_ANCHOR} from './common';\nimport {TreeWorker} from './traversal';\nimport {View} from './view';\n\nexport class ListState<T> {\n  constructor(\n    public group: number, // Constructs of this tree can only be written to if they are members of this group\n    public owner: number, // The structure is freely mutable if owner === batch.current || owner === -1\n    public size: number,\n    public lastWrite: OFFSET_ANCHOR,\n    public left: View<T>,\n    public right: View<T>\n  ) {}\n}\n\nexport function cloneState<T>(state: ListState<T>, group: number, mutable: boolean): ListState<T> {\n  return new ListState<T>(group, mutable ? batch.owner || -1 : 0, state.size, state.lastWrite, state.left, state.right);\n}\n\nexport function ensureMutable<T>(state: ListState<T>): ListState<T> {\n  return isMutable(state.owner) ? state : cloneState(state, nextId(), true);\n}\n\nexport function ensureImmutable<T>(state: ListState<T>, done: boolean): ListState<T> {\n  if(!isMutable(state.owner)) {\n    return state;\n  }\n  if(done) {\n    state.owner = 0;\n    state.group = nextId(); // Ensure that subsequent read operations don't cause mutations to existing nodes\n    return state;\n  }\n  var state = cloneState(state, state.group, false);\n  state.group = nextId();\n  return state;\n}\n\nexport function getView<T>(state: ListState<T>, anchor: OFFSET_ANCHOR, asWriteTarget: boolean, preferredOrdinal: number = -1): View<T> {\n  var view = anchor === OFFSET_ANCHOR.LEFT ? state.left : state.right;\n  if(view.isNone()) {\n    var otherView = anchor === OFFSET_ANCHOR.RIGHT ? state.left : state.right;\n    if(!otherView.isNone()) {\n      if(otherView.parent.isNone() || otherView.slot.size + otherView.offset === state.size) {\n        setView(state, View.empty<T>(otherView.anchor));\n        otherView = otherView.cloneToGroup(state.group);\n        otherView.flipAnchor(state.size);\n        setView(state, view = otherView);\n      }\n      else {\n        view = TreeWorker.refocusView<T>(state, otherView, preferredOrdinal !== -1 ? preferredOrdinal : anchor === OFFSET_ANCHOR.LEFT ? 0 : -1, true, true);\n      }\n    }\n  }\n  if(asWriteTarget && !view.isEditable(state.group)) {\n    setView(state, view = view.cloneToGroup(state.group));\n  }\n  return view;\n}\n\nexport function getOtherView<T>(state: ListState<T>, anchor: OFFSET_ANCHOR): View<T> {\n  return anchor === OFFSET_ANCHOR.LEFT ? state.right : state.left;\n}\n\nexport function setView<T>(state: ListState<T>, view: View<T>): void {\n  if(view.anchor === OFFSET_ANCHOR.LEFT) {\n    state.left = view;\n  }\n  else {\n    state.right = view;\n  }\n}\n\nexport function emptyState<T>(mutable: boolean): ListState<T> {\n  return mutable\n    ? new ListState<T>(nextId(), batch.owner || -1, 0, OFFSET_ANCHOR.RIGHT, View.empty<T>(OFFSET_ANCHOR.LEFT), View.empty<T>(OFFSET_ANCHOR.RIGHT))\n    : _defaultEmpty;\n}\n\nvar _defaultEmpty = new ListState<any>(0, 0, 0, OFFSET_ANCHOR.RIGHT, View.empty<any>(OFFSET_ANCHOR.LEFT), View.empty<any>(OFFSET_ANCHOR.RIGHT));"]}