{"version":3,"sources":["../lib/ts/list/concat.ts"],"names":[],"mappings":"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","file":"concat.js","sourcesContent":["import {nextId} from '../shared/ownership';\nimport {concatToNewArray} from '../shared/array';\nimport {CONST, COMMIT_MODE, OFFSET_ANCHOR, concatSlotsToNewArray} from './common';\nimport {TreeWorker} from './traversal';\nimport {compact} from './compact';\nimport {Slot} from './slot';\nimport {View} from './view';\nimport {ListState, cloneState, setView} from './state';\n\nexport function concatLists<T>(leftState: ListState<T>, rightState: ListState<T>): ListState<T> {\n  if(leftState.size === 0) {\n    return rightState;\n  }\n\n  if(rightState.size === 0) {\n    return leftState;\n  }\n\n  // Ensure that the right list has the same group as the left list and that if they are references to the same list,\n  // that the right list is first cloned to avoid ghosted changes between different nodes, and that both lists are\n  // working within the same group context.\n  if((leftState === rightState && (leftState.group = nextId())) || rightState.group !== leftState.group) {\n    rightState = cloneState(rightState, leftState.group, true);\n  }\n\n  var left = TreeWorker.defaultPrimary<T>().reset(leftState, TreeWorker.focusTail<T>(leftState, true), leftState.group, COMMIT_MODE.RELEASE);\n  var right = TreeWorker.defaultSecondary<T>().reset(rightState, TreeWorker.focusHead(rightState, true), leftState.group, COMMIT_MODE.RELEASE);\n\n  if(left.current.slot.group !== left.group) {\n    left.current = left.current.ensureEditable(leftState.group, true);\n    setView(leftState, left.current);\n  }\n\n  if(right.current.slot.group !== right.group) {\n    right.current = right.current.ensureEditable(rightState.group, true);\n    setView(rightState, right.current);\n  }\n\n  var group = leftState.group,\n      leftIsRoot = left.isRoot(),\n      rightIsRoot = right.isRoot(),\n      isJoined = false,\n      nodes: [Slot<T>, Slot<T>] = [left.current.slot, right.current.slot];\n\n  do {\n    if(left.current.anchor === OFFSET_ANCHOR.RIGHT) {\n      left.current.flipAnchor(leftState.size);\n    }\n    if(right.current.anchor === OFFSET_ANCHOR.RIGHT) {\n      right.current.flipAnchor(rightState.size);\n    }\n\n    var rightSlotCount = right.current.slotCount();\n    var rightSize = right.current.slot.size;\n\n    // If join() returns true, it means that, at the very least, some slots were shuffled from right to left. If the\n    // right slot in the nodes array has size zero after the operation, then the right slot has been fully merged into\n    // the left slot and can be eliminated.\n    if(join(nodes, left.shift, leftIsRoot || rightIsRoot, [leftState, rightState])) {\n      var slotCountDelta = rightSlotCount - nodes[1].slots.length;\n      var slotSizeDelta = rightSize - nodes[1].size;\n\n      isJoined = (leftIsRoot || rightIsRoot) && nodes[1].slots.length === 0;\n      left.current.replaceSlot(nodes[0]);\n\n      if(!isJoined || !left.isRoot()) {\n        left.current.slotsDelta += slotCountDelta;\n        left.current.sizeDelta += slotSizeDelta;\n      }\n\n      if(isJoined) {\n        if(!rightIsRoot) {\n          if(right.current.slot.isReserved()) {\n            left.current.slot.group = -group;\n          }\n          left.current.parent = right.current.parent;\n          left.current.recalculateDeltas();\n        }\n        if(!right.otherCommittedChild.isNone()) {\n          right.otherCommittedChild.slotIndex += left.current.slotCount() - slotCountDelta;\n          right.otherCommittedChild.parent = left.current;\n        }\n        if(left.shift > 0 && right.current.slot.size > 0) {\n          right.previous.slotIndex += slotCountDelta;\n          right.previous.parent = left.current;\n          right.previous.recalculateDeltas();\n        }\n      }\n      else {\n        right.current.replaceSlot(nodes[1]);\n        right.current.sizeDelta -= slotSizeDelta;\n        right.current.slotsDelta -= slotCountDelta;\n      }\n    }\n\n    if(!isJoined) {\n      left.ascend(COMMIT_MODE.RELEASE);\n\n      if(left.shift === CONST.BRANCH_INDEX_BITCOUNT) {\n        left.previous.flipAnchor(leftState.size + rightState.size);\n      }\n\n      right.ascend(COMMIT_MODE.RELEASE);\n\n      if(!leftIsRoot) {\n        leftIsRoot = left.current.isRoot();\n      }\n      if(!rightIsRoot) rightIsRoot = right.current.isRoot();\n\n      nodes[0] = left.current.slot;\n      nodes[1] = right.current.slot;\n\n    }\n  } while(!isJoined);\n\n  leftState.size += rightState.size;\n\n  if(right.hasOtherView()) {\n    if(!left.hasOtherView()) {\n      if(leftState.right.anchor !== OFFSET_ANCHOR.LEFT) {\n        leftState.right.flipAnchor(leftState.size);\n      }\n      setView(leftState, leftState.right);\n    }\n    if(right.other.slot.size > 0) {\n      setView(leftState, right.other);\n    }\n    else {\n      right.other.disposeIfInGroup(rightState.group, leftState.group);\n      setView(leftState, View.empty<T>(OFFSET_ANCHOR.RIGHT));\n    }\n  }\n\n  leftState.lastWrite = leftState.right.slot.isReserved() || leftState.left.isNone() ? OFFSET_ANCHOR.RIGHT : OFFSET_ANCHOR.LEFT;\n\n  left.dispose();\n  right.dispose();\n\n  return leftState;\n}\n\nexport function join<T>(nodes: [Slot<T>, Slot<T>], shift: number, canFinalizeJoin: boolean, lists?: any): boolean {\n  var left = nodes[0], right = nodes[1];\n  var count = left.slots.length + right.slots.length;\n\n  if(canFinalizeJoin && count <= CONST.BRANCH_FACTOR) {\n    var relaxed = left.isRelaxed() || right.isRelaxed() || !left.isSubtreeFull(shift);\n\n    // TODO: don't allocate new arrays if the slots already have the correct group\n    left.slots = shift === 0\n      ? concatToNewArray(left.slots, right.slots, 0)\n      : concatSlotsToNewArray<T>(<Slot<T>[]>left.slots, <Slot<T>[]>right.slots);\n    left.size += right.size;\n    left.subcount += right.subcount;\n    left.recompute = relaxed ? 0 : -1;\n    nodes[1] = Slot.empty<T>();\n    return true;\n  }\n\n  if(shift === 0) {\n    return false;\n  }\n\n  var reducedCount = calculateRebalancedSlotCount(count, left.subcount + right.subcount);\n  if(count === reducedCount) {\n    return false;\n  }\n\n  compact([left, right], shift, count - reducedCount, lists);\n  return true;\n}\n\nexport function calculateExtraSearchSteps(upperSlots: number, lowerSlots: number): number {\n  var steps =  upperSlots - (((lowerSlots - 1) >>> CONST.BRANCH_INDEX_BITCOUNT) + 1);\n  return steps;\n}\n\nexport function calculateRebalancedSlotCount(upperSlots: number, lowerSlots: number): number {\n  var reduction = calculateExtraSearchSteps(upperSlots, lowerSlots) - CONST.MAX_OFFSET_ERROR;\n  return upperSlots - (reduction > 0 ? reduction : 0);\n}\n"]}