{"version":3,"sources":["../lib/ts/list/slot.ts"],"names":[],"mappings":"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","file":"slot.js","sourcesContent":["import {nextId} from '../shared/ownership';\nimport {isDefined, abs, max} from '../shared/functions';\nimport {copyArray} from '../shared/array';\nimport {CONST, COMMIT_MODE, verifyIndex} from './common';\n\nexport type ChildSlotOutParams<T> = {\n  slot: T|Slot<T>,\n  index: number,\n  offset: number\n};\n\nexport class Slot<T> {\n  constructor(\n    public group: number,\n    public size: number, // the total number of descendent elements\n    public sum: number, // the total accumulated size at this slot\n    public recompute: number, // the number of child slots for which the sum must be recalculated\n    public subcount: number, // the total number of slots belonging to immediate child slots\n    public slots: (Slot<T>|T)[]\n  ) {}\n\n  static empty<T>(): Slot<T> {\n    return emptySlot;\n  }\n\n  shallowClone(mode: COMMIT_MODE): Slot<T> {\n    var group = mode === COMMIT_MODE.NO_CHANGE ? this.group\n              : mode === COMMIT_MODE.RESERVE ? -abs(this.group)\n              : abs(this.group);\n    var slot = new Slot<T>(group, this.size, this.sum, this.recompute, this.subcount, this.slots);\n    return slot;\n  }\n\n  shallowCloneToGroup(group: number, preserveStatus: boolean = false): Slot<T> {\n    if(preserveStatus && this.group < 0) {\n      group = -abs(group);\n    }\n    return new Slot<T>(group, this.size, this.sum, this.recompute, this.subcount, this.slots);\n  }\n\n  cloneToGroup(group: number, preserveStatus: boolean = false): Slot<T> {\n    if(preserveStatus && this.group < 0) {\n      group = -abs(group);\n    }\n    return new Slot<T>(group, this.size, this.sum, this.recompute, this.subcount, copyArray(this.slots));\n  }\n\n  toReservedNode(group: number): Slot<T> {\n    if(group < 0) group = -group;\n    if(this.group === group) {\n      this.group = -group;\n      return this;\n    }\n    return this.cloneToGroup(-group);\n  }\n\n  cloneAsPlaceholder(group: number): Slot<T> {\n    return new Slot<T>(-abs(group), this.size, this.sum, this.recompute, this.subcount, new Array<T>(this.slots.length));\n  }\n\n  cloneWithAdjustedRange(group: number, padLeft: number, padRight: number, isLeaf: boolean, preserveStatus: boolean = false): Slot<T> {\n    if(preserveStatus && this.group < 0) {\n      group = -abs(group);\n    }\n    var src = this.slots;\n    var slots = new Array<T|Slot<T>>(src.length + padLeft + padRight);\n    var dest = new Slot<T>(group, this.size, 0, this.recompute, 0, slots);\n    adjustSlotBounds(this, dest, padLeft, padRight, isLeaf);\n    return dest;\n  }\n\n  adjustRange(padLeft: number, padRight: number, isLeaf: boolean): void {\n    adjustSlotBounds(this, this, padLeft, padRight, isLeaf);\n  }\n\n  createParent(group: number, mode: COMMIT_MODE, expand?: ExpansionParameters): Slot<T> {\n    var childSlot: Slot<T> = this;\n    if(mode === COMMIT_MODE.RELEASE) {\n      childSlot = childSlot.prepareForRelease(group);\n    }\n    else if(mode === COMMIT_MODE.RESERVE) {\n      childSlot = this.cloneAsPlaceholder(group);\n    }\n    var slotCount = 1, nodeSize = this.size, slotIndex = 0;\n    if(isDefined(expand)) {\n      slotCount += expand.padLeft + expand.padRight;\n      nodeSize += expand.sizeDelta;\n      slotIndex += expand.padLeft;\n    }\n\n    var slots = new Array<Slot<T>>(slotCount);\n    slots[slotIndex] = childSlot;\n    return new Slot<T>(group, nodeSize, 0, this.recompute === -1 ? -1 : slotCount, this.slots.length, slots);\n  }\n\n  isReserved(): boolean {\n    return this.group < 0;\n  }\n\n  isReservedFor(group: number): boolean {\n    return this.group === -group;\n  }\n\n  isRelaxed(): boolean {\n    return this.recompute !== -1;\n  }\n\n  isEditable(group: number): boolean {\n    return abs(this.group) === group;\n  }\n\n  calculateRecompute(slotCountDelta: number): number {\n    return this.recompute === -1 ? -1 : this.recompute + slotCountDelta;\n  }\n\n  isSubtreeFull(shift: number): boolean {\n    return this.slots.length << shift === this.size;\n  }\n\n  prepareForRelease(currentGroup: number): Slot<T> {\n    if(this.group === -currentGroup) {\n      this.group = currentGroup;\n      return this;\n    }\n    return this.group < 0 ? this.shallowClone(COMMIT_MODE.RELEASE) : this;\n  }\n\n  updatePlaceholder(actual: Slot<T>): void {\n    this.size = actual.size;\n    this.slots.length = actual.slots.length;\n  }\n\n  reserveChildAtIndex(slotIndex: number): Slot<T> {\n    var index = verifyIndex(this.slots.length, slotIndex);\n    var slot = <Slot<T>>this.slots[index];\n    this.slots[index] = slot.cloneAsPlaceholder(slot.group);\n    return slot;\n  }\n\n  resolveChild(ordinal: number, shift: number, out: ChildSlotOutParams<T>): boolean {\n    if(shift === 0) {\n      if(ordinal >= this.slots.length) return false;\n      out.slot = this.slots[ordinal];\n      out.index = ordinal;\n      out.offset = 0;\n      return true;\n    }\n\n    var slotIndex = (ordinal >>> shift) & CONST.BRANCH_INDEX_MASK;\n    if(slotIndex >= this.slots.length) return false;\n\n    if(this.recompute === -1) {\n      out.slot = <Slot<T>>this.slots[slotIndex];\n      out.index = slotIndex;\n      out.offset = slotIndex << shift;\n      return true;\n    }\n\n    var invalidFromIndex = this.slots.length - this.recompute;\n    var slot: Slot<T>, i: number;\n    if(slotIndex < invalidFromIndex) {\n      do {\n        slot = <Slot<T>>this.slots[slotIndex];\n      } while(ordinal >= slot.sum && slotIndex < invalidFromIndex && ++slotIndex);\n      if(slotIndex < invalidFromIndex) {\n        out.slot = slot;\n        out.index = slotIndex;\n        out.offset = slotIndex === 0 ? 0 : (<Slot<T>>this.slots[slotIndex - 1]).sum;\n        return true;\n      }\n    }\n\n    var slotCap = 1 << shift;\n    var maxSum = slotCap * invalidFromIndex;\n    var sum = invalidFromIndex === 0 ? 0 : (<Slot<T>>this.slots[invalidFromIndex - 1]).sum;\n    var lastIndex = this.slots.length - 1;\n    var found = false;\n    this.recompute = 0;\n\n    for(i = invalidFromIndex; i <= lastIndex; i++) {\n      if(i === lastIndex && sum === maxSum && !(<Slot<T>>this.slots[i]).isRelaxed()) {\n        this.recompute = -1;\n        if(!found) {\n          slot = <Slot<T>>this.slots[i];\n          if(sum + slot.size > ordinal) {\n            out.slot = slot;\n            out.index = i;\n            out.offset = sum - slot.size;\n            found = true;\n          }\n        }\n      }\n      else {\n        slot = <Slot<T>>this.slots[i];\n        sum += slot.size;\n        maxSum += slotCap;\n\n        if(slot.sum !== sum) {\n          if(slot.group !== this.group && slot.group !== -this.group) {\n            this.slots[i] = slot = slot.shallowClone(COMMIT_MODE.NO_CHANGE);\n          }\n          slot.sum = sum;\n        }\n\n        if(!found && sum > ordinal) {\n          out.slot = slot;\n          out.index = i;\n          out.offset = sum - slot.size;\n          found = true;\n        }\n      }\n    }\n\n    return found;\n  }\n}\n\nfunction adjustSlotBounds<T>(src: Slot<T>, dest: Slot<T>, padLeft: number, padRight: number, isLeaf: boolean): void {\n  var srcSlots = src.slots;\n  var destSlots = dest.slots;\n  var srcIndex: number, destIndex: number, amount: number;\n\n\n  if(padLeft < 0) {\n    amount = srcSlots.length + padLeft;\n    srcIndex = -padLeft;\n    destIndex = 0;\n  }\n  else {\n    amount = srcSlots.length;\n    srcIndex = 0;\n    destIndex = padLeft;\n  }\n\n  if(padRight < 0) {\n    amount += padRight;\n  }\n\n  var slotCountDelta = padLeft + padRight;\n  if(srcSlots === destSlots && slotCountDelta > 0) {\n    destSlots.length += padLeft + padRight;\n  }\n\n\n  var copySlots = padLeft !== 0 || srcSlots !== destSlots;\n  var step = 1;\n  if(padLeft > 0) {\n    srcIndex += amount - 1;\n    destIndex += amount - 1;\n    step = -1;\n  }\n\n  if(isLeaf) {\n    if(copySlots) {\n      for(var c = 0; c < amount; srcIndex += step, destIndex += step, c++) {\n        destSlots[destIndex] = srcSlots[srcIndex];\n      }\n    }\n    dest.size = amount + max(0, slotCountDelta);\n  }\n  else {\n    if(copySlots || padRight < 0) {\n      var subcount = 0, size = 0;\n      for(var c = 0; c < amount; srcIndex += step, destIndex += step, c++) {\n        var slot = <Slot<T>>srcSlots[srcIndex];\n        subcount += slot.slots.length;\n        size += slot.size;\n        if(copySlots) {\n          destSlots[destIndex] = slot;\n        }\n      }\n      dest.size = size;\n      dest.subcount = subcount;\n      dest.recompute = padLeft === 0 ? src.recompute === -1 ? -1 : src.recompute + padRight : destSlots.length;\n    }\n    else if(dest.recompute !== -1) {\n      dest.recompute += padRight;\n    }\n  }\n\n  if(srcSlots === destSlots && slotCountDelta < 0) {\n    destSlots.length = amount;\n  }\n}\n\nexport class ExpansionParameters {\n  private static _default = new ExpansionParameters();\n\n  padLeft = 0;\n  padRight = 0;\n  sizeDelta = 0;\n\n  private constructor() {}\n\n  static get(padLeft: number, padRight: number, sizeDelta: number): ExpansionParameters {\n    var state = ExpansionParameters._default;\n    state.padLeft = padLeft;\n    state.padRight = padRight;\n    state.sizeDelta = sizeDelta;\n    return state;\n  }\n}\n\nexport var emptySlot = new Slot<any>(nextId(), 0, 0, -1, 0, []);\n"]}